from javascript.errors import JavaScriptError

from flask import Flask, request, jsonify, Response
from flask_cors import CORS
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWebChannel import QWebChannel
from tkinter import messagebox
from javascript import require, On, errors
from random import uniform
from sys import exit, argv
from asyncio import run, sleep
from threading import Thread, Timer, Event
from queue import Queue, Empty
from hashlib import sha512
from requests import get
from subprocess import check_output
from re import search
from pypresence import Presence
from psutil import process_iter
from random import choice, randint
import time

mineflayer = require('mineflayer')
pathfinder = require('mineflayer-pathfinder')
GoalFollow = pathfinder.goals.GoalFollow

isFollowing = False
task_queue = Queue()

first_player = None
second_player = None
first_bet = 0
second_bet = 0
min_amount = 5000
waiting_for_second_player = None
timeout_timer = None

scam_version = False
autocasino_status = False

discordrpc = False

last_bot_message = ""
message_text = ""
message_queue = Queue()

html_content = r"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@4/dark.css">
    <style>
        body {
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #fff;
            font-size: 18px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            background-color: #111;
        }
        .container {
            display: flex;
            height: 100vh;
        }
        .sidebar {
            background-color: #222;
            padding: 20px;
            width: 300px;
        }
        .sidebar h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: bold;
        }
        .sidebar ul {
            list-style: none;
            padding: 0;
        }
        .sidebar li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        .sidebar li:hover {
            background-color: #333;
        }
        
        .sidebar.gradient-blue-green { background-image: linear-gradient(to right, blue, green); }
        .sidebar.gradient-darkblue { background-image: linear-gradient(to right, darkblue, #222); }
        .sidebar.gradient-red-orange { background-image: linear-gradient(to right, red, orange); }
        .sidebar.gradient-purple-blue { background-image: linear-gradient(to right, purple, blue); }
        .sidebar.gradient-yellow-green { background-image: linear-gradient(to right, yellow, green); }
        .sidebar.gradient-orange-red { background-image: linear-gradient(to right, darkred, #500000); }
        .sidebar.gradient-gold-yellow { background-image: linear-gradient(to right, gold, yellow); }
        .sidebar.gradient-cyan-blue { background-image: linear-gradient(to right, cyan, blue); }
        .sidebar.gradient-lime-green { background-image: linear-gradient(to right, lime, green); }
        .sidebar.gradient-pink-purple { background-image: linear-gradient(to right, pink, purple); }
        .sidebar.gradient-teal-blue { background-image: linear-gradient(to right, teal, blue); }
        .sidebar.gradient-brown-beige { background-image: linear-gradient(to right, brown, beige); }
        .sidebar.gradient-gray-black { background-image: linear-gradient(to right, gray, black); }
        
        .time {
            font-size: 16px;
            color: #aaa;
            margin-top: 20px;
        }
        .theme {
            display: none;
        }
        .content {
            flex-grow: 1;
            background-color: #111;
            padding: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .home-content, .misc-content, .ai-content, .custom-function-content {
            width: 500px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 20px;
            font-weight: bold;
        }
        .form-group input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 17px;
            transition: background-color 0.2s;
        }
        .form-group button:hover {
            background-color: #286090;
        }
        .content > div {
            display: none;
        }
        .content > div:first-child {
            display: block;
        }
        body.dark {
            background-color: #111;
        }
        body.dark .content {
            background-color: #111;
        }

        .function-list {
            list-style: none;
            padding: 0;
        }
        .function-list li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
            background-color: #333;
            margin-bottom: 10px;
        }
        .function-list li:hover {
            background-color: #444;
        }
        .selected {
            background-color: #444 !important;
        }
    
        #afk-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #afk-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #afk-modal .form-group {
            margin-bottom: 20px;
        }
        #afk-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #afk-modal .form-group input,
        #afk-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #afk-modal .form-group input::-webkit-outer-spin-button,
        #afk-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #afk-modal .form-group input:focus,
        #afk-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #afk-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #afk-modal .form-group button:hover {
            background-color: #286090;
        }
        #afk-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #afk-modal .close-btn:hover {
            color: #fff;
        }

        #start-button {
            outline: none;
        }

        #click-on-gui-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #click-on-gui-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #click-on-gui-modal .form-group {
            margin-bottom: 20px;
        }
        #click-on-gui-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #click-on-gui-modal .form-group input,
        #click-on-gui-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #click-on-gui-modal .form-group input::-webkit-outer-spin-button,
        #click-on-gui-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #click-on-gui-modal .form-group input:focus,
        #click-on-gui-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #click-on-gui-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #click-on-gui-modal .form-group button:hover {
            background-color: #286090;
        }
        #click-on-gui-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #click-on-gui-modal .close-btn:hover {
            color: #fff;
        }

        .console-content {
            display: flex;
            flex-direction: column;
            width: 100%;
        }
        
        #console-log {
            flex-grow: 1;
            padding: 10px;
            background-color: #222;
            color: #fff;
            border: 2px solid #333;
            border-radius: 10px;
            overflow-y: auto;
            margin-bottom: 20px;
            font-size: 18px;
            max-height: 300px;
        }
        
        .console-content .form-group {
            display: flex;
        }
        
        .console-content .form-group input[type="text"] {
            flex-grow: 1;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        
        .console-content .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        
        .console-content .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 10px;
            margin-left: 10px;
            outline: none;
        }
        
        .console-content .form-group button:hover {
            background-color: #286090;
        }

        #autoway-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #autoway-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #autoway-modal .form-group {
            margin-bottom: 20px;
        }
        #autoway-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #autoway-modal .form-group input,
        #autoway-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #autoway-modal .form-group input::-webkit-outer-spin-button,
        #autoway-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #autoway-modal .form-group input:focus,
        #autoway-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #autoway-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #autoway-modal .form-group button:hover {
            background-color: #286090;
        }
        #autoway-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #autoway-modal .close-btn:hover {
            color: #fff;
        }

        #follow-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #follow-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #follow-modal .form-group {
            margin-bottom: 20px;
        }
        #follow-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #follow-modal .form-group input,
        #follow-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #follow-modal .form-group input::-webkit-outer-spin-button,
        #follow-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #follow-modal .form-group input:focus,
        #follow-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #follow-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #follow-modal .form-group button:hover {
            background-color: #286090;
        }
        #follow-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #follow-modal .close-btn:hover {
            color: #fff;
        }

        #overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
        #autocasino-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #autocasino-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #autocasino-modal .form-group {
            margin-bottom: 20px;
        }
        #autocasino-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #autocasino-modal .form-group input,
        #autocasino-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #autocasino-modal .form-group input::-webkit-outer-spin-button,
        #autocasino-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #autocasino-modal .form-group input:focus,
        #autocasino-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #autocasino-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #autocasino-modal .form-group button:hover {
            background-color: #286090;
        }
        #autocasino-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #autocasino-modal .close-btn:hover {
            color: #fff;
        }
        #autocasino-modal .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }
        #autocasino-modal .checkbox-group input[type="checkbox"] {
            display: none;
        }
        #autocasino-modal .checkbox-group label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        #autocasino-modal .checkbox-group label span {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #333;
            border-radius: 3px;
            margin-right: 10px;
            transition: background-color 0.3s;
            position: relative;
        }
        #autocasino-modal .checkbox-group input[type="checkbox"]:checked + label span {
            background-color: #337ab7;
            border-color: #337ab7;
        }
        #autocasino-modal .checkbox-group input[type="checkbox"]:checked + label span::after {
            font-family: "Font Awesome 5 Free";
            font-weight: 900;
            color: #fff;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 14px;
        }
        
        #get-location-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #get-location-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #get-location-modal .form-group {
            margin-bottom: 20px;
        }
        #get-location-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #get-location-modal .form-group input,
        #get-location-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #get-location-modal .form-group input::-webkit-outer-spin-button,
        #get-location-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #get-location-modal .form-group input:focus,
        #get-location-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #get-location-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #get-location-modal .form-group button:hover {
            background-color: #286090;
        }
        #get-location-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #get-location-modal .close-btn:hover {
            color: #fff;
        }

        .hud-content { 
            width: 500px;
            text-align: center;
        }
        
        .theme-selector label {
          display: block;
          margin-bottom: 10px;
          color: #fff;
          font-weight: bold;
          font-size: 24px; 
        }
        
        .color-options {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
          gap: 10px;
        }
        
        .color-options input[type="radio"] {
          display: none;
        }
        
        .color-options label {
          height: 40px;
          border-radius: 5px;
          cursor: pointer;
        }
        
        .color-options label[for="color-black"] {
          background-color: #111; 
        }
        
        .color-options label[for="color-blue-green"] {
          background-image: linear-gradient(to right, blue, green);
        }
        
        .color-options label[for="color-darkblue"] {
          background-image: linear-gradient(to right, darkblue, #222);
        }
        
        .color-options label[for="color-red-orange"] {
          background-image: linear-gradient(to right, red, orange);
        }
        
        .color-options label[for="color-purple-blue"] {
          background-image: linear-gradient(to right, purple, blue);
        }
        
        .color-options label[for="color-yellow-green"] {
          background-image: linear-gradient(to right, yellow, green);
        }
        
        .color-options label[for="color-orange-red"] {
          background-image: linear-gradient(to right, darkred, #500000); 
        }

        .color-options label[for="color-gold-yellow"] {
          background-image: linear-gradient(to right, gold, yellow);
        }

        .color-options label[for="color-cyan-blue"] {
          background-image: linear-gradient(to right, cyan, blue);
        }

        .color-options label[for="color-lime-green"] {
          background-image: linear-gradient(to right, lime, green);
        }

        .color-options label[for="color-pink-purple"] {
          background-image: linear-gradient(to right, pink, purple);
        }

        .color-options label[for="color-teal-blue"] {
          background-image: linear-gradient(to right, teal, blue);
        }

        .color-options label[for="color-brown-beige"] {
          background-image: linear-gradient(to right, brown, beige);
        }

        .color-options label[for="color-gray-black"] {
          background-image: linear-gradient(to right, gray, black);
        }
        
        .color-options input[type="radio"]:checked + label {
            border: 2px solid white; 
        }
        
        .gradient-blue-green .custom-element {
            background-image: linear-gradient(to right, blue, green) !important;
        }
        
        .gradient-darkblue .custom-element {
            background-image: linear-gradient(to right, darkblue, #222) !important; 
        }
        
        .gradient-red-orange .custom-element {
            background-image: linear-gradient(to right, red, orange) !important; 
        }
        
        .gradient-purple-blue .custom-element {
            background-image: linear-gradient(to right, purple, blue) !important; 
        }
        
        .gradient-yellow-green .custom-element {
            background-image: linear-gradient(to right, yellow, green) !important; 
        }
        
        .gradient-orange-red .custom-element {
            background-image: linear-gradient(to right, darkred, #500000) !important; 
        }
        
        .gradient-gold-yellow .custom-element {
            background-image: linear-gradient(to right, gold, yellow) !important;
        }
        
        .gradient-cyan-blue .custom-element {
            background-image: linear-gradient(to right, cyan, blue) !important;
        }
        
        .gradient-lime-green .custom-element {
            background-image: linear-gradient(to right, lime, green) !important;
        }
        
        .gradient-pink-purple .custom-element {
            background-image: linear-gradient(to right, pink, purple) !important;
        }
        
        .gradient-teal-blue .custom-element {
            background-image: linear-gradient(to right, teal, blue) !important;
        }
        
        .gradient-brown-beige .custom-element {
            background-image: linear-gradient(to right, brown, beige) !important;
        }
        
        .gradient-gray-black .custom-element {
            background-image: linear-gradient(to right, gray, black) !important;
        }
    </style>
</head>
<body class="dark">
<div class="container">
    <div class="sidebar">
        <h2>Entity Client</h2>
        <ul>
            <li id="home">Home</li>
            <li id="misc">Misc</li>
            <li id="console">Console</li>
            <li id="hud">HUD</li>
        </ul>
    </div>
    <div class="content">
        <div class="home-content">
            <form id="start-form">
                <div class="form-group">
                    <label for="username">Никнейм</label>
                    <input type="text" id="username" name="username" placeholder="Введите ник бота">
                </div>
                <div class="form-group">
                    <label for="ip-address">IP Адрес</label>
                    <input type="text" id="ip-address" name="ip_address" placeholder="Введите IP адрес">
                </div>
                <div class="form-group">
                    <label for="port">Порт</label>
                    <input type="text" id="port" name="port" placeholder="Введите порт">
                </div>
                <div class="form-group">
                    <button type="button" class="custom-element" id="start-button">Запуск</button>
                </div>
            </form>
            <div id="output-status"></div>
            <div id="output-log"></div>
        </div>
        <div class="misc-content">
            <ul class="function-list">
                <li class="custom-element"id="anti-afk">Anti-AFK</li>
                <li class="custom-element"id="autocasino">AutoCasino</li>
                <li class="custom-element"id="autoway">AutoWay</li>
                <li class="custom-element"id="click-on-gui" class="custom-element">Click On Gui</li>
                <li class="custom-element">Follow</li>
                <li class="custom-element"id="get-location">Get Location</li>
            </ul>
        </div>
        <div class="console-content" style="display: none;">
            <div id="console-log"></div> 
            <div class="form-group"> 
                <input type="text" id="console-input" placeholder="Введите сообщение...">
                <button class="custom-element" id="console-send-button">Отправить</button> 
            </div>
        </div>
        <div class="hud-content style="display: none;">
            <div class="theme-selector">
                <label for="theme-select">Цвет клиента:</label>
                <div class="color-options">
                    <input type="radio" id="color-black" name="theme" value="color-black" checked>
                    <label for="color-black" class="color-black"></label>
    
                    <input type="radio" id="color-blue-green" name="theme" value="gradient-blue-green">
                    <label for="color-blue-green" class="gradient-blue-green"></label>
    
                    <input type="radio" id="color-darkblue" name="theme" value="gradient-darkblue">
                    <label for="color-darkblue" class="gradient-darkblue"></label>
    
                    <input type="radio" id="color-red-orange" name="theme" value="gradient-red-orange">
                    <label for="color-red-orange" class="gradient-red-orange"></label>
    
                    <input type="radio" id="color-purple-blue" name="theme" value="gradient-purple-blue">
                    <label for="color-purple-blue" class="gradient-purple-blue"></label>
    
                    <input type="radio" id="color-yellow-green" name="theme" value="gradient-yellow-green">
                    <label for="color-yellow-green" class="gradient-yellow-green"></label>
    
                    <input type="radio" id="color-orange-red" name="theme" value="gradient-orange-red">
                    <label for="color-orange-red" class="gradient-orange-red"></label>
    
                    <input type="radio" id="color-gold-yellow" name="theme" value="gradient-gold-yellow">
                    <label for="color-gold-yellow" class="gradient-gold-yellow"></label>
    
                    <input type="radio" id="color-cyan-blue" name="theme" value="gradient-cyan-blue">
                    <label for="color-cyan-blue" class="gradient-cyan-blue"></label>
    
                    <input type="radio" id="color-lime-green" name="theme" value="gradient-lime-green">
                    <label for="color-lime-green" class="gradient-lime-green"></label>
    
                    <input type="radio" id="color-pink-purple" name="theme" value="gradient-pink-purple">
                    <label for="color-pink-purple" class="gradient-pink-purple"></label>
    
                    <input type="radio" id="color-teal-blue" name="theme" value="gradient-teal-blue">
                    <label for="color-teal-blue" class="gradient-teal-blue"></label>
    
                    <input type="radio" id="color-brown-beige" name="theme" value="gradient-brown-beige">
                    <label for="color-brown-beige" class="gradient-brown-beige"></label>
    
                    <input type="radio" id="color-gray-black" name="theme" value="gradient-gray-black">
                    <label for="color-gray-black" class="gradient-gray-black"></label>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="afk-modal">
    <span class="close-btn" onclick="closeAntiAfkModal()">×</span>
    <h2>Anti-AFK</h2>
    <div class="form-group">
        <label for="afk-cycles">Количество циклов</label>
        <input type="number" id="afk-cycles" value="10">
    </div>
    <div class="form-group">
        <button class="custom-element" id="afk-start-button">Запуск</button>
    </div>
</div>
<div id="click-on-gui-modal">
    <span class="close-btn" onclick="closeClickOnGuiModal()">×</span>
    <h2>Click On Gui</h2>
    <div class="form-group">
        <label for="bot-slot">Введите номер слота</label>
        <input type="text" id="bot-slot">
    </div>
    <div class="form-group">
        <button class="custom-element" id="click-on-gui-start-button">Нажать</button>
    </div>
</div>

<div id="overlay"></div>
<div id="autocasino-modal">
    <span class="close-btn" onclick="closeAutoCasinoModal()">×</span>
    <h2>FunTime AutoCasino</h2>
    <div class="form-group">
        <label for="autocasino-min-amount">Минимальная сумма</label>
        <input type="number" id="autocasino-min-amount" value="5000">
    </div>
    <div class="checkbox-group">
        <input type="checkbox" id="scam-version">
        <label for="scam-version">
            <span></span>
            Скам-режим
        </label>
    </div>
    <div class="form-group">
        <button id="autocasino-start-button">Запуск</button>
        <button type="button" class="custom-element" id="autocasino-stop-button" style="display: none;">Остановить</button>
    </div>
</div>

<div id="autoway-modal">
    <span class="close-btn" onclick="closeAutowayModal()">×</span>
    <h2>AutoWay</h2>
    <div class="form-group">
        <label for="autoway-x">Координата X:</label>
        <input type="number" id="autoway-x">
    </div>
    <div class="form-group">
        <label for="autoway-z">Координата Z:</label>
        <input type="number" id="autoway-z">
    </div>
    <div class="form-group">
        <button class="custom-element" id="autoway-start-button">Запуск</button>
    </div>
</div>
<div id="follow-modal">
    <span class="close-btn" onclick="closeFollowModal()">×</span>
    <h2>Follow Player</h2>
    <div class="form-group">
        <label for="follow-player-name">Ник игрока</label>
        <input type="text" id="follow-player-name">
    </div>
    <div class="form-group">
        <button type="button" class="custom-element" id="follow-start-button">Запуск</button>
        <button type="button" class="custom-element" id="follow-stop-button" style="display: none;">Остановить</button>
    </div>
</div>
<div id="get-location-modal">
    <span class="close-btn" onclick="closeGetLocationModal()">×</span>
    <h2>Get Location</h2>
    <div class="form-group">
        <label for="player-name">Ник игрока</label>
        <input type="text" id="player-name">
    </div>
    <div class="form-group">
        <button class="custom-element" id="get-location-button">Запуск</button>
    </div>
</div>
<script>
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
    });
    
    home.classList.add('selected');
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const contentDivs = document.querySelectorAll('.content > div');
    const sidebarItems = document.querySelectorAll('.sidebar li');
    let botStarted = false;

    sidebarItems.forEach(item => {
      item.addEventListener('click', function () {
        const id = this.id;

    if (id === 'console' && !botStarted) {
      Swal.fire({
        icon: 'warning',
        title: 'Bot Error',
        text: 'Сначала запустите бота!',
      });
      return;
    }
    
    if (id === 'hud' && !isPremium) {
      Swal.fire({
        title: 'Premium Function',
        text: 'Для использования этой функции требуется Premium подписка!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Купить Premium',
        cancelButtonText: 'Отмена'
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = 'https://funpay.com/users/6829696/';
        }
      });
      return;
    }

        contentDivs.forEach(div => {
          if (div.classList.contains(id + '-content')) {
            div.style.display = 'block';
          } else {
            div.style.display = 'none';
          }
        });
        sidebarItems.forEach(item => {
          item.classList.remove('selected');
        });
        this.classList.add('selected');
      });
    });

    const startButton = document.getElementById('start-button');
    let lastClickTime = 0;
    const throttleTime = 2500;

    startButton.addEventListener('click', () => {
        const now = new Date().getTime();
        if (now - lastClickTime < throttleTime) {
            Swal.fire({
                icon: 'warning',
                title: 'Too many requests',
                text: 'Пожалуйста, повторите попытку позже.',
            });
            return;
        }
            
        lastClickTime = now;
        const username = document.getElementById('username').value;
        const ipAddress = document.getElementById('ip-address').value;
        const port = document.getElementById('port').value;

    if (!username || !ipAddress || !port) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Заполните все поля.',
        });
        return;
    }
    
    if (isNaN(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт должен быть числом.',
        });
        return;
    }
    
    if (port.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт некорректный.',
        });
        return;
    }
    
    if (username.length < 3) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Никнейм некорректный.',
        });
        return;
    }
    
    if (ipAddress.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'IP-адрес некорректный.',
        });
        return;
    }

    const specialChars = /[@#^$%&*()\[\]{}|~!+\\\/=:;"'<>?,]/;
    const whitespace = /\s/;
    const cyrillic = /[а-яА-ЯёЁ]/;
    
    if (specialChars.test(username) || specialChars.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Специальные символы запрещены.',
        });
        return;
    }
    
    if (whitespace.test(username) || whitespace.test(ipAddress) || whitespace.test(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Пробелы запрещены.',
        });
        return;
    }
    
    if (cyrillic.test(username) || cyrillic.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Русские символы запрещены.',
        });
        return;
    }

        if (botStarted) {
            fetch('http://127.0.0.1:5000/stop-bot', {
                method: 'POST',
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Запуск';
                botStarted = false;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Stopped',
                    text: 'Бот был успешно остановлен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Ошибка при остановке бота.',
                });
            });
        } else {
            fetch('http://127.0.0.1:5000/start-bot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: username,
                    ip_address: ipAddress,
                    port: port,
                }),
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Остановить';
                botStarted = true;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Started',
                    text: 'Бот был успешно запущен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.',
                });
            });
        }
    });

    const afkButton = document.getElementById('anti-afk');
    const afkModal = document.getElementById('afk-modal');
    const afkStartButton = document.getElementById('afk-start-button');

    afkButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        afkModal.style.display = 'block';
    });

    afkStartButton.addEventListener('click', () => {
        const cycles = document.getElementById('afk-cycles').value;
        fetch('http://127.0.0.1:5000/start-antiafk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                cycles: cycles,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Anti-AFK Started',
                text: 'Anti-AFK был успешно запущен!',
            });
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        afkModal.style.display = 'none';
    });
    
    const autoCasinoButton = document.getElementById('autocasino');
    const autoCasinoModal = document.getElementById('autocasino-modal');
    const autoCasinoStartButton = document.getElementById('autocasino-start-button');
    const autoCasinoStopButton = document.getElementById('autocasino-stop-button');
    const scamVersionCheckbox = document.getElementById('scam-version');

    autoCasinoButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autoCasinoModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    });

    autoCasinoStartButton.addEventListener('click', () => {
        const amount = document.getElementById('autocasino-min-amount').value;
        const scamVersion = scamVersionCheckbox.checked;
        fetch('http://127.0.0.1:5000/start-autocasino', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                min_amount: amount,
                scam_version: scamVersion,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'AutoCasino Started',
                text: 'AutoCasino был успешно запущен!',
            });
            autoCasinoModal.style.display = 'none';
            autoCasinoStartButton.style.display = 'none';
            autoCasinoStopButton.style.display = 'block';
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        autoCasinoModal.style.display = 'none';
    });

    autoCasinoStopButton.addEventListener('click', () => {
        fetch('http://127.0.0.1:5000/stop-autocasino', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'AutoCasino',
                    text: 'Бот прекратил писать в чат.',
                });
                autoCasinoModal.style.display = 'none';
                autoCasinoStartButton.style.display = 'block';
                autoCasinoStopButton.style.display = 'none';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Bot Error',
                    text: 'Неизвестная ошибка.',
                });
            }
        });
    });

    const clickOnGuiButton = document.getElementById('click-on-gui');
    const clickOnGuiModal = document.getElementById('click-on-gui-modal');
    const clickOnGuiStartButton = document.getElementById('click-on-gui-start-button');
    
    clickOnGuiButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        clickOnGuiModal.style.display = 'block';
    });

    clickOnGuiStartButton.addEventListener('click', () => {
        const botSlot = parseInt(document.getElementById('bot-slot').value); 
    
        if (isNaN(botSlot)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректный номер слота.',
            });
            return; 
        }
    
        fetch('http://127.0.0.1:5000/click_on_gui', { 
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ bot_slot: botSlot }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Click On Gui',
                    text: 'Бот кликнул по слоту ' + botSlot + '.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Не удалось выполнить клик.',
                });
            }
        });
        document.getElementById('bot-slot').value = '';
    });

    const autowayButton = document.getElementById('autoway');
    const autowayModal = document.getElementById('autoway-modal');
    const autowayStartButton = document.getElementById('autoway-start-button');

    autowayButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autowayModal.style.display = 'block';
    });

    autowayStartButton.addEventListener('click', () => {
        const x = parseInt(document.getElementById('autoway-x').value);
        const z = parseInt(document.getElementById('autoway-z').value);

        if (isNaN(x) || isNaN(z)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректные координаты X и Z.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/start-autoway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ x: x, z: z }),
        })
            .then(response => {
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'AutoWay started',
                        text: 'Бот начал движение к указанным координатам.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Bot Error',
                        text: 'Не удалось запустить AutoWay.',
                    });
                }
            });
        autowayModal.style.display = 'none';
    });
    
    const consoleLog = document.getElementById('console-log');
    const consoleInput = document.getElementById('console-input');
    const consoleSendButton = document.getElementById('console-send-button');
    
    function logToConsole(message) {
        const messageElement = document.createElement('p');
        messageElement.textContent = message;
        consoleLog.appendChild(messageElement);
        consoleLog.scrollTop = consoleLog.scrollHeight;
    }
    
    function sendMessage() {
        const message = consoleInput.value.trim();
        if (message !== "") {
            fetch('http://127.0.0.1:5000/console_message', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({message: message})
            });
            consoleInput.value = "";
        }
    }
    
    consoleSendButton.addEventListener('click', sendMessage);
    
    consoleInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            sendMessage();
        }
    });

    function checkForMessages() {
        if (botStarted) {
            fetch('http://127.0.0.1:5000/get_messages')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.text !== '') {
                        logToConsole(data.text);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                });
        }
    }
    
    const followButton = document.querySelector('.function-list li:nth-child(5)');
    const followModal = document.getElementById('follow-modal');
    const followStartButton = document.getElementById('follow-start-button');
    const followStopButton = document.getElementById('follow-stop-button');
    let isFollowing = false; 
    
    followButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        followModal.style.display = 'block';
    });
    
    followStartButton.addEventListener('click', () => {
        const playerName = document.getElementById('follow-player-name').value;
    
        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите ник игрока.',
            });
            return;
        }
    
        fetch('http://127.0.0.1:5000/start-follow', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Started',
                    text: 'Бот начал движение за игроком ' + playerName + '.',
                });
                isFollowing = true;
                followStartButton.style.display = 'none';
                followStopButton.style.display = 'block';
                autowayModal.style.display = 'none';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to start following.',
                });
            }
        });
    });
    
    followStopButton.addEventListener('click', () => {
        fetch('http://127.0.0.1:5000/stop-follow', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Stopped',
                    text: 'Бот прекратил движение.',
                });
                isFollowing = false;
                autowayModal.style.display = 'none';
                followStartButton.style.display = 'block'; 
                followStopButton.style.display = 'none'; 
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Bot Error',
                    text: 'Неизвестная ошибка.',
                });
            }
        });
    });
    
    const getLocationButton = document.querySelector('.function-list li:nth-child(6)'); 
    const getLocationModal = document.getElementById('get-location-modal');
    const getPlayerLocationButton = document.getElementById('get-location-button');
    
    getLocationButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        getLocationModal.style.display = 'block';
    });

    getPlayerLocationButton.addEventListener('click', () => {
        const playerName = document.getElementById('player-name').value;

        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите имя игрока.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/get-coordinates', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
            .then(response => response.json()) 
            .then(data => { 
                if (data.success) { 
                   Swal.fire({
                        icon: 'success',
                        title: 'Get Location',
                        text: 'Информация выведена в чат.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Не удалось получить координаты.',
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.', 
                });
            });

        getLocationModal.style.display = 'none'; 
    });

    const colorOptions = document.querySelectorAll('.color-options input[type="radio"]');
    const body = document.body; 
    const sidebar = document.querySelector('.sidebar');
    const formGroups = document.querySelectorAll('.form-group');
    const consoleContent = document.querySelector('.console-content');
    const content = document.querySelector('.content');
    
    colorOptions.forEach(option => {
        option.addEventListener('change', function() {
            const selectedGradient = this.value;
    
            body.className = '';
            sidebar.className = 'sidebar';
            content.className = 'content';

            body.classList.add(selectedGradient);
            sidebar.classList.add(selectedGradient);
            content.classList.add(selectedGradient);
    
            formGroups.forEach(formGroup => {
                formGroup.className = 'form-group';
                formGroup.classList.add(selectedGradient);
            });
    
            consoleContent.className = 'console-content';
            consoleContent.classList.add(selectedGradient);
        });
    });
    
    let isPremium;

    fetch('http://127.0.0.1:5000/check_premium')
    .then(response => response.json())
    .then(data => {
        isPremium = data.isPremium; 
    })
    .catch(error => console.error('Fetch Error:', error));


    setInterval(checkForMessages, 600);
    
    function closeAutoCasinoModal() {
        autoCasinoModal.style.display = 'none';
    }
    
    function closeGetLocationModal() {
        getLocationModal.style.display = 'none';
    }

    function closeFollowModal() {
        followModal.style.display = 'none';
    }

    function closeAutowayModal() {
        autowayModal.style.display = 'none';
    }

    function closeClickOnGuiModal() {
        clickOnGuiModal.style.display = 'none';
    }

    function closeAntiAfkModal() {
        afkModal.style.display = 'none';
    }

</script>
</body>
</html>
"""

app = Flask(__name__)
CORS(app)

bot_started = False

@app.route('/start-bot', methods=['POST'])
def start_bot_route():
    global bot_started
    if bot_started:
        return jsonify({'success': False, 'message': 'Бот уже запущен.'})
    data = request.json
    username = data['username']
    ip_address = data['ip_address']
    port = data['port']
    thread = Thread(target=start_bot, args=(username, ip_address, port))
    thread.start()
    bot_started = True
    return jsonify({'success': True})

@app.route('/stop-bot', methods=['POST'])
def stop_bot_route():
    global bot_started, bot
    if not bot_started:
        return jsonify({'success': False, 'message': 'Бот не запущен.'})
    thread = Thread(target=stop_bot)
    thread.start()
    bot_started = False
    return jsonify({'success': True})

@app.route('/start-antiafk', methods=['POST'])
def start_antiafk_route():
    data = request.json
    cycles = int(data['cycles'])
    thread = Thread(target=start_AntiAFK, args=(cycles,))
    thread.start()
    return jsonify({'success': True})

@app.route('/click_on_gui', methods=['POST'])
def click_on_gui_route():
    data = request.json
    bot_slot = int(data.get('bot_slot', 0))
    thread = Thread(target=click_on_gui, args=(bot_slot,))
    thread.start()
    return jsonify({'success': True})

@app.route('/start-autoway', methods=['POST'])
def start_autoway_route():
    data = request.json
    x = int(data['x'])
    z = int(data['z'])
    thread = Thread(target=autoway, args=(x, z,))
    thread.start()
    return jsonify({'success': True})

@app.route('/check_premium', methods=['GET'])
def check_premium_route():
    hwid = get_hwid()
    if hwid:
        hashed_hwid = hash_hwid(hwid)
        is_premium = check_premium(hashed_hwid)
        return jsonify({'isPremium': is_premium})
    else:
        return jsonify({'isPremium': False})

@app.route('/start-follow', methods=['POST'])
def start_follow_route():
    global isFollowing
    if isFollowing:
        return jsonify({'success': False, 'message': 'Bot is already following.'})

    data = request.json
    player_name = data['player']
    follow_thread = Thread(target=follow, args=(player_name,))
    follow_thread.start()
    isFollowing = True
    return jsonify({'success': True})

@app.route('/stop-follow', methods=['POST'])
def stop_follow_route():
    global isFollowing
    if not isFollowing:
        return jsonify({'success': False, 'message': 'Bot is not currently following.'})

    isFollowing = False
    bot_unfollow()

    return jsonify({'success': True})

@app.route('/get-coordinates', methods=['POST'])
def get_coordinates_route():
    data = request.json
    player_name = data['player']
    thread = Thread(target=get_coordinates, args=(player_name,))
    thread.start()
    return jsonify({'success': True})

@app.route('/start-autocasino', methods=['POST'])
def start_autocasino_route():
    global min_amount, scam_version
    data = request.json
    min_amount = int(data.get('min_amount'))
    scam_version = data.get('scam_version')
    print(scam_version)
    thread = Thread(target=autocasino, args=(min_amount, scam_version))
    thread.start()
    return jsonify({'success': True})

@app.route('/stop-autocasino', methods=['POST'])
def stop_autocasino_route():
    global autocasino_status
    autocasino_status =True
    return jsonify({'success': True})

@app.route('/console_message', methods=['POST'])
def console_message_route():
    data = request.get_json()
    if data and 'message' in data:
        message = data['message']
        thread = Thread(target=handle_console_message, args=(message,))
        thread.start()
    return jsonify({'success': True})

@app.route('/get_messages')
def get_messages():
    try:
        message = message_queue.get(timeout=0.1)
        return jsonify({'text': message})
    except Empty:
        return jsonify({'text': ''})

def handle_console_message(message):
    global bot
    if bot:
        bot.chat(message)

def get_bot_message():
    global last_bot_message
    return last_bot_message

def start_AntiAFK(cycles):
    run(bot_antiafk(cycles))

def autoway(x, z):
    run(bot_autoway(x, z))

def follow(player):
    run(bot_follow(player))

def click_on_gui(bot_slot):
    run(bot_click_on_gui(bot_slot))

def get_coordinates(player):
    run(bot_get_coordinates(player))

def autocasino(min_amount, scam_version):
    run(bot_autocasino(min_amount, scam_version))

def start_bot(username, host, port):
    run(start_bot_async(username, host, port))

def stop_bot():
    run(bot_disconnect())

def bot_open_auction():
    pass

async def start_bot_async(username, host, port):
    global bot
    bot = mineflayer.createBot({
        'username': username,
        'host': host,
        'port': int(port),
        'hideErrors': True
    })
    bot.loadPlugin(pathfinder.pathfinder)

    @On(bot, 'message')
    def message_handler(emitter, message_info, *args):
        if message_info.extra is None:
            return False

        message_text = ''.join(i.text for i in message_info.extra)
        print(f"{message_text}")
        message_queue.put(message_text)
# xyir2dsdwss

async def bot_autocasino(min_amount, scam_version):
    def send_message():
        if not autocasino_status:
            time.sleep(0.5)
            bot.chat(f"! Я новый казино бот! Я даю возможность сыграть вам 1 на 1, для этого просто отправьте мне от ${min_amount}.")
            time.sleep(1.5)

    def small_value(sender):
        time.sleep(1)
        bot.chat(f"/msg {sender} Извините, но минимальная ставка - ${min_amount}. Ставка не возвращается")
        time.sleep(1.5)

    def return_bet(sender, amount):
        if not scam_version:
            bot.chat(f"/pay {sender} {amount}")
            time.sleep(1)
            bot.chat(f"/pay {sender} {amount}")
            time.sleep(1)
            bot.chat(f"/msg {sender} Вы уже участвуете в игре. Ваша ставка ${amount} возвращена.")

    def player_lose(winner, loser, loser_bet):
        bot.chat(f"/msg {loser} Ты проиграл игроку {winner}. Его ставка: {loser_bet}")

    def player_won(winner, loser, first_bet, second_bet):
        total_pot = first_bet + second_bet
        program_share = int(total_pot * 0.5)
        remaining_pot = total_pot - program_share
        winner_share = first_bet + int(remaining_pot * 0.50) if winner == first_player else second_bet + int(remaining_pot * 0.50)

        bot.chat(f"/pay {winner} {winner_share}")
        time.sleep(2)
        bot.chat(f"/pay {winner} {winner_share}")
        time.sleep(1.25)
        bot.chat(f"/msg {winner} Ты выиграл игрока {loser}. Твой выигрыш: {winner_share}")
        time.sleep(1.25)
        bot.chat(f"/msg {loser} Ты проиграл игроку {winner}. Его ставка: {first_bet if winner == first_player else second_bet}")
        time.sleep(0.5)
        bot.chat("/balance")
        time.sleep(0.5)

    def reset_game():
        global first_player, second_player, first_bet, second_bet, waiting_for_second_player, timeout_timer
        first_player = None
        second_player = None
        first_bet = 0
        second_bet = 0
        waiting_for_second_player = None
        if timeout_timer is not None:
            timeout_timer.cancel()
            timeout_timer = None

    def timeout_handler():
        global first_player, first_bet
        if first_player and second_player is None:
            if not scam_version:
                bot.chat(f'/msg {first_player} Время ожидания второго игрока истекло. Ваша ставка ${first_bet} возвращена.')
                return_bet(first_player, first_bet)
            reset_game()
            time.sleep(1.5)

    def send_message_periodically():
        if not autocasino_status:
            while not autocasino_status:
                send_message()
                cooldown = randint(15, 41)
                time.sleep(cooldown)

    @On(bot, 'message')
    def message_handler(_emitter, message_info, *_args):
        global first_player, second_player, first_bet, second_bet, min_amount, waiting_for_second_player, timeout_timer

        if autocasino_status:
            return

        if message_info.extra is None:
            return False

        message_text = ''.join([i.text for i in message_info.extra])

        if '[$] Ваш баланс' in message_text:
            parts = message_text.split(":")
            if len(parts) > 1:
                balance = parts[1].strip()

        if 'получено от игрока' in message_text:
            pattern = r'\$([\д,]+).*получено от игрока (\w+)'
            match = search(pattern, message_text)

            if match:
                amount = int(match.group(1).replace(',', ''))
                player_name = match.group(2)

                if amount != 1 and amount < min_amount:
                    small_value(player_name)
                    return

                if player_name == first_player or player_name == second_player:
                    if not scam_version:
                        return_bet(player_name, amount)
                    return

                if first_player is None or scam_version:
                    first_player = player_name
                    first_bet = amount
                    waiting_for_second_player = True
                    if timeout_timer is not None:
                        timeout_timer.cancel()
                    timeout_timer = Timer(90, timeout_handler)
                    timeout_timer.start()
                    bot.chat(f"/msg {player_name} Ты зарегистрирован как первый игрок. Ставка: ${first_bet}")
                elif second_player is None and not scam_version:
                    min_bet = max(min_amount, int(first_bet * 0.8))
                    max_bet = int(first_bet * 1.2)
                    if min_bet <= amount <= max_bet:
                        second_player = player_name
                        second_bet = amount
                        waiting_for_second_player = False
                        if timeout_timer is not None:
                            timeout_timer.cancel()
                            timeout_timer = None
                    else:
                        bot.chat(f"/msg {player_name} Ставка некорректная. Подходящая ставка: ${min_bet}-${max_bet}. Ваша ставка ${amount} возвращена.")
                        if not scam_version:
                            return_bet(player_name, amount)
                        sleep(1.5)

                if first_player and second_player:
                    winner = choice([first_player, second_player])
                    loser = first_player if winner == second_player else second_player

                    player_won(winner, loser, first_bet, second_bet)
                    player_lose(winner, loser, first_bet if winner == first_player else second_bet)
                    reset_game()

    message_thread = Thread(target=send_message_periodically)
    message_thread.daemon = True
    message_thread.start()

async def bot_antiafk(cycles):
    for _ in range(cycles):
        bot.setControlState('right', True)
        time.sleep(0.5)
        bot.setControlState('right', False)
        time.sleep(0.5)
        bot.setControlState('left', True)
        time.sleep(0.5)
        bot.setControlState('left', False)
        time.sleep(0.5)

def is_discord_running():
    for process in process_iter(['name']):
        if process.info['name'] == 'Discord.exe':
            return True
    return False

def check_discord_process():
    discordrpc = False
    while True:
        if is_discord_running():
            if not discordrpc:
                toggle_discord_rpc(True)
                discordrpc = True
        else:
            if discordrpc:
                toggle_discord_rpc(False)
                discordrpc = False
        time.sleep(10)

async def bot_get_coordinates(player):
    if player in bot.players:
        entity = bot.players[player].entity
        if entity is None or not hasattr(entity, 'position'):
            bot.chat(f"Игрок с именем {player} не найден, либо не находится в радиусе 4 чанков.")
            return jsonify({'success': False})

        coordinates = entity.position
        x = "{:.1f}".format(coordinates.x)
        y = "{:.1f}".format(coordinates.y)
        z = "{:.1f}".format(coordinates.z)

        bot.chat(f"Локация игрока {player}: x={x}, y={y}, z={z}")
        return jsonify({'success': True})
    else:
        return jsonify({'success': False})

async def bot_autoway(x, z, *args):
    mcData = require("minecraft-data")(bot.version)
    movements = pathfinder.Movements(bot, mcData)

    movements.allowFreeMotion = True
    movements.allowSprinting = False

    bot.pathfinder.setMovements(movements)

    bot.look(uniform(-180, 180), uniform(-90, 90))
    bot.pathfinder.setGoal(pathfinder.goals.GoalNear(x, bot.entity.position.y, z, 1))
    bot.setControlState('jump', True)
    bot.look(uniform(-180, 180), uniform(-90, 90))

async def bot_follow(player_name):
    global isFollowing
    if isFollowing:
        mcData = require("minecraft-data")(bot.version)
        movements = pathfinder.Movements(bot, mcData)

        movements.allowFreeMotion = True
        movements.allowSprinting = False

        target = bot.players[player_name].entity
        bot.pathfinder.setMovements(movements)
        goal = GoalFollow(target, 1)
        bot.pathfinder.setGoal(goal, True)
        await sleep(0.1)
    if not isFollowing:
        bot.pathfinder.setGoal(None)

async def bot_spammer(cmd, text, cooldown, *args):
    time.sleep(cooldown)
    players = bot.players
    for player in players:
        users = players[player]["username"]
        time.sleep(3.5)
        bot.chat(f'{cmd} {users} {text}')

def use_on_entity(entity):
    global target_entity
    try:
        mcData = require('minecraft-data')(bot.version)
        movements = pathfinder.Movements(bot, mcData)
        bot.pathfinder.setMovements(movements)
        bot.pathfinder.setGoal(pathfinder.goals.GoalNear(entity.position.x, entity.position.y, entity.position.z, 1))
        target_entity = entity
    except Exception as e:
        print(f"Error handling entity: {e}")

def bot_unfollow():
    mcData = require("minecraft-data")(bot.version)
    movements = pathfinder.Movements(bot, mcData)

    bot.pathfinder.setMovements(movements)
    bot.pathfinder.setGoal(None)

async def bot_click_on_gui(bot_slot):
    try:
        time.sleep(1)
        bot.clickWindow(bot_slot, 0, 0)
    except errors.JavaScriptError:
        pass

async def bot_disconnect():
    bot.quit()

def toggle_discord_rpc(discordrpc):
    client_id = '1195092611615178802'
    RPC = Presence(client_id)
    if discordrpc:
        if is_discord_running():
            try:
                RPC.connect()
                RPC.update(
                    details="Release",
                    large_image="icon2",
                    start=int(time.time())
                )
            except Exception:
                pass
        else:
            pass
    else:
        try:
            RPC.close()
        except Exception:
            pass

def get_wmi_data(query):
    try:
        result = check_output(query, shell=True).decode().split('\n')[1].strip()
        return result
    except Exception as e:
        print(f"Ошибка при выполнении команды {query}: {e}")
        return None

def get_hwid():
    motherboard = get_wmi_data('wmic baseboard get serialnumber')
    processor = get_wmi_data('wmic cpu get processorid')
    disk = get_wmi_data('wmic diskdrive get serialnumber')
    bios = get_wmi_data('wmic bios get serialnumber')
    os = get_wmi_data('wmic os get serialnumber')

    hwid = f"{motherboard}{processor}{disk}{bios}{os}"
    return hwid

def hash_hwid(hwid):
    sha256_hash = sha512(hwid.encode()).hexdigest()
    return sha256_hash

def get_premium_hwids():
    url = "https://raw.githubusercontent.com/rimero321/entityclient/main/hwids.txt"
    response = get(url)
    hwids = response.text.splitlines()
    return hwids

def check_premium(hashed_hwid):
    if not hashed_hwid:
        return False
    premium_hwids = get_premium_hwids()
    return hashed_hwid in premium_hwids

def client_status():
    response = get('https://raw.githubusercontent.com/rimero321/entityclient/main/versions.txt')
    if response.status_code == 200:
        content = response.text.split('\n')
        status = content[0].split(': ')[1].strip()
        return status

status = str(client_status())

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(' ')
        self.setGeometry(100, 100, 1050, 700)
        self.setFixedSize(1050, 700)
        self.browser = QWebEngineView()
        self.browser.setHtml(html_content)
        self.setCentralWidget(self.browser)
        self.channel = QWebChannel()
        self.browser.page().setWebChannel(self.channel)
        self.channel.registerObject("bridge", self)

if __name__ == '__main__':
    if status == 'True':
        flask_thread = Thread(target=lambda: app.run(port=5000, debug=False, use_reloader=False))
        flask_thread.start()

        rpc_thread = Thread(target=check_discord_process)
        rpc_thread.start()

        app_qt = QApplication(argv)
        window = MainWindow()
        window.show()
        exit(app_qt.exec_())
    else:
        messagebox.showerror("Entity Client", "Доступна новая версия.")

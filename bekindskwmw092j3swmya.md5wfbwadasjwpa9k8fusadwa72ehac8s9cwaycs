# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live
# bro let client live

from javascript .errors import JavaScriptError #line:1
from flask import Flask ,request ,jsonify ,Response #line:3
from flask_cors import CORS #line:4
from PyQt5 .QtWidgets import QApplication ,QMainWindow #line:5
from PyQt5 .QtWebEngineWidgets import QWebEngineView #line:6
from PyQt5 .QtWebChannel import QWebChannel #line:7
from tkinter import messagebox #line:8
from javascript import require ,On ,errors #line:9
from random import uniform #line:10
from sys import exit ,argv #line:11
from asyncio import run ,sleep #line:12
from threading import Thread ,Timer ,Event #line:13
from queue import Queue ,Empty #line:14
from hashlib import sha512 #line:15
from requests import get #line:16
from subprocess import check_output #line:17
from re import search #line:18
from random import choice ,randint #line:19
import time #line:20
mineflayer =require ('mineflayer')#line:22
pathfinder =require ('mineflayer-pathfinder')#line:23
GoalFollow =pathfinder .goals .GoalFollow #line:24
isFollowing =False #line:26
task_queue =Queue ()#line:27
first_player =None #line:29
second_player =None #line:30
first_bet =0 #line:31
second_bet =0 #line:32
min_amount =5000 #line:33
waiting_for_second_player =None #line:34
timeout_timer =None #line:35
last_bot_message =""#line:37
message_text =""#line:38
message_queue =Queue ()#line:39
html_content =r"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@4/dark.css">
    <style>
        body {
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #fff;
            font-size: 18px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            background-color: #111;
        }
        .container {
            display: flex;
            height: 100vh;
        }
        .sidebar {
            background-color: #222;
            padding: 20px;
            width: 300px;
        }
        .sidebar h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: bold;
        }
        .sidebar ul {
            list-style: none;
            padding: 0;
        }
        .sidebar li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        .sidebar li:hover {
            background-color: #333;
        }
        
        .sidebar.gradient-blue-green { background-image: linear-gradient(to right, blue, green); }
        .sidebar.gradient-darkblue { background-image: linear-gradient(to right, darkblue, #222); }
        .sidebar.gradient-red-orange { background-image: linear-gradient(to right, red, orange); }
        .sidebar.gradient-purple-blue { background-image: linear-gradient(to right, purple, blue); }
        .sidebar.gradient-yellow-green { background-image: linear-gradient(to right, yellow, green); }
        .sidebar.gradient-orange-red { background-image: linear-gradient(to right, darkred, #500000); }
        .sidebar.gradient-gold-yellow { background-image: linear-gradient(to right, gold, yellow); }
        .sidebar.gradient-cyan-blue { background-image: linear-gradient(to right, cyan, blue); }
        .sidebar.gradient-lime-green { background-image: linear-gradient(to right, lime, green); }
        .sidebar.gradient-pink-purple { background-image: linear-gradient(to right, pink, purple); }
        .sidebar.gradient-teal-blue { background-image: linear-gradient(to right, teal, blue); }
        .sidebar.gradient-brown-beige { background-image: linear-gradient(to right, brown, beige); }
        .sidebar.gradient-gray-black { background-image: linear-gradient(to right, gray, black); }
        
        .time {
            font-size: 16px;
            color: #aaa;
            margin-top: 20px;
        }
        .theme {
            display: none;
        }
        .content {
            flex-grow: 1;
            background-color: #111;
            padding: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .home-content, .misc-content, .ai-content, .custom-function-content {
            width: 500px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 20px;
            font-weight: bold;
        }
        .form-group input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 17px;
            transition: background-color 0.2s;
        }
        .form-group button:hover {
            background-color: #286090;
        }
        .content > div {
            display: none;
        }
        .content > div:first-child {
            display: block;
        }
        body.dark {
            background-color: #111;
        }
        body.dark .content {
            background-color: #111;
        }

        .function-list {
            list-style: none;
            padding: 0;
        }
        .function-list li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
            background-color: #333;
            margin-bottom: 10px;
        }
        .function-list li:hover {
            background-color: #444;
        }
        .selected {
            background-color: #444 !important;
        }
        #afk-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }
        #afk-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }
        #afk-modal .form-group {
            margin-bottom: 20px;
        }
        #afk-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #afk-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }
        #afk-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }
        #afk-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #afk-modal .form-group button:hover {
            background-color: #286090;
        }
        #afk-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #afk-modal .close-btn:hover {
            color: #fff;
        }
        
        #start-button {
            outline: none;
        }

        #click-on-gui-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }
        #click-on-gui-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }
        #click-on-gui-modal .form-group {
            margin-bottom: 20px;
        }
        #click-on-gui-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #click-on-gui-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }
        #click-on-gui-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }
        #click-on-gui-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #click-on-gui-modal .form-group button:hover {
            background-color: #286090;
        }
        #click-on-gui-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #click-on-gui-modal .close-btn:hover {
            color: #fff;
        }
        
        .console-content {
            display: flex;
            flex-direction: column;
            width: 100%;
        }
        
        #console-log {
            flex-grow: 1;
            padding: 10px;
            background-color: #222;
            color: #fff;
            border: 2px solid #333;
            border-radius: 10px;
            overflow-y: auto;
            margin-bottom: 20px;
            font-size: 18px;
            max-height: 300px;
        }
        
        .console-content .form-group {
            display: flex;
        }
        
        .console-content .form-group input[type="text"] {
            flex-grow: 1;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        
        .console-content .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        
        .console-content .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 10px;
            margin-left: 10px;
            outline: none;
        }
        
        .console-content .form-group button:hover {
            background-color: #286090;
        }
        
        #autoway-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #autoway-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #autoway-modal .form-group {
            margin-bottom: 20px;
        }

        #autoway-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #autoway-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #autoway-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #autoway-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #autoway-modal .form-group button:hover {
            background-color: #286090;
        }

        #autoway-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #autoway-modal .close-btn:hover {
            color: #fff;
        }
        
        #follow-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #follow-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #follow-modal .form-group {
            margin-bottom: 20px;
        }

        #follow-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #follow-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #follow-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #follow-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #follow-modal .form-group button:hover {
            background-color: #286090;
        }

        #follow-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #follow-modal .close-btn:hover {
            color: #fff;
        }
        
        #autocasino-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #autocasino-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #autocasino-modal .form-group {
            margin-bottom: 20px;
        }

        #autocasino-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #autocasino-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #autocasino-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #autocasino-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #autocasino-modal .form-group button:hover {
            background-color: #286090;
        }

        #autocasino-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #autocasino-modal .close-btn:hover {
            color: #fff;
        }

        #get-location-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #get-location-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #get-location-modal .form-group {
            margin-bottom: 20px;
        }

        #get-location-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #get-location-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #get-location-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #get-location-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #get-coordinates-modal .form-group button:hover {
            background-color: #286090;
        }

        #get-location-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #get-location-modal .close-btn:hover {
            color: #fff;
        }

        .hud-content { 
            width: 500px;
            text-align: center;
        }
        
        .theme-selector label {
          display: block;
          margin-bottom: 10px;
          color: #fff;
          font-weight: bold;
          font-size: 24px; 
        }
        
        .color-options {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
          gap: 10px;
        }
        
        .color-options input[type="radio"] {
          display: none;
        }
        
        .color-options label {
          height: 40px;
          border-radius: 5px;
          cursor: pointer;
        }
        
        .color-options label[for="color-black"] {
          background-color: #111; 
        }
        
        .color-options label[for="color-blue-green"] {
          background-image: linear-gradient(to right, blue, green);
        }
        
        .color-options label[for="color-darkblue"] {
          background-image: linear-gradient(to right, darkblue, #222);
        }
        
        .color-options label[for="color-red-orange"] {
          background-image: linear-gradient(to right, red, orange);
        }
        
        .color-options label[for="color-purple-blue"] {
          background-image: linear-gradient(to right, purple, blue);
        }
        
        .color-options label[for="color-yellow-green"] {
          background-image: linear-gradient(to right, yellow, green);
        }
        
        .color-options label[for="color-orange-red"] {
          background-image: linear-gradient(to right, darkred, #500000); 
        }

        .color-options label[for="color-gold-yellow"] {
          background-image: linear-gradient(to right, gold, yellow);
        }

        .color-options label[for="color-cyan-blue"] {
          background-image: linear-gradient(to right, cyan, blue);
        }

        .color-options label[for="color-lime-green"] {
          background-image: linear-gradient(to right, lime, green);
        }

        .color-options label[for="color-pink-purple"] {
          background-image: linear-gradient(to right, pink, purple);
        }

        .color-options label[for="color-teal-blue"] {
          background-image: linear-gradient(to right, teal, blue);
        }

        .color-options label[for="color-brown-beige"] {
          background-image: linear-gradient(to right, brown, beige);
        }

        .color-options label[for="color-gray-black"] {
          background-image: linear-gradient(to right, gray, black);
        }
        
        .color-options input[type="radio"]:checked + label {
            border: 2px solid white; 
        }
        
        .gradient-blue-green .custom-element {
            background-image: linear-gradient(to right, blue, green) !important;
        }
        
        .gradient-darkblue .custom-element {
            background-image: linear-gradient(to right, darkblue, #222) !important; 
        }
        
        .gradient-red-orange .custom-element {
            background-image: linear-gradient(to right, red, orange) !important; 
        }
        
        .gradient-purple-blue .custom-element {
            background-image: linear-gradient(to right, purple, blue) !important; 
        }
        
        .gradient-yellow-green .custom-element {
            background-image: linear-gradient(to right, yellow, green) !important; 
        }
        
        .gradient-orange-red .custom-element {
            background-image: linear-gradient(to right, darkred, #500000) !important; 
        }
        
        .gradient-gold-yellow .custom-element {
            background-image: linear-gradient(to right, gold, yellow) !important;
        }
        
        .gradient-cyan-blue .custom-element {
            background-image: linear-gradient(to right, cyan, blue) !important;
        }
        
        .gradient-lime-green .custom-element {
            background-image: linear-gradient(to right, lime, green) !important;
        }
        
        .gradient-pink-purple .custom-element {
            background-image: linear-gradient(to right, pink, purple) !important;
        }
        
        .gradient-teal-blue .custom-element {
            background-image: linear-gradient(to right, teal, blue) !important;
        }
        
        .gradient-brown-beige .custom-element {
            background-image: linear-gradient(to right, brown, beige) !important;
        }
        
        .gradient-gray-black .custom-element {
            background-image: linear-gradient(to right, gray, black) !important;
        }
    </style>
</head>
<body class="dark">
<div class="container">
    <div class="sidebar">
        <h2>Entity Client</h2>
        <ul>
            <li id="home">Home</li>
            <li id="misc">Misc</li>
            <li id="console">Console</li>
            <li id="hud">HUD</li>
        </ul>
    </div>
    <div class="content">
        <div class="home-content">
            <form id="start-form">
                <div class="form-group">
                    <label for="username">Никнейм</label>
                    <input type="text" id="username" name="username" placeholder="Введите ник бота">
                </div>
                <div class="form-group">
                    <label for="ip-address">IP Адрес</label>
                    <input type="text" id="ip-address" name="ip_address" placeholder="Введите IP адрес">
                </div>
                <div class="form-group">
                    <label for="port">Порт</label>
                    <input type="text" id="port" name="port" placeholder="Введите порт">
                </div>
                <div class="form-group">
                    <button type="button" class="custom-element" id="start-button">Запуск</button>
                </div>
            </form>
            <div id="output-status"></div>
            <div id="output-log"></div>
        </div>
        <div class="misc-content">
            <ul class="function-list">
                <li class="custom-element"id="anti-afk">Anti-AFK</li>
                <li class="custom-element"id="autocasino">AutoCasino</li>
                <li class="custom-element"id="autoway">AutoWay</li>
                <li class="custom-element"id="click-on-gui" class="custom-element">Click On Gui</li>
                <li class="custom-element">Follow</li>
                <li class="custom-element"id="get-location">Get Location</li>
            </ul>
        </div>
        <div class="console-content" style="display: none;">
            <div id="console-log"></div> 
            <div class="form-group"> 
                <input type="text" id="console-input" placeholder="Введите сообщение...">
                <button class="custom-element" id="console-send-button">Отправить</button> 
            </div>
        </div>
        <div class="hud-content style="display: none;">
            <div class="theme-selector">
                <label for="theme-select">Цвет клиента:</label>
                <div class="color-options">
                    <input type="radio" id="color-black" name="theme" value="color-black" checked>
                    <label for="color-black" class="color-black"></label>
    
                    <input type="radio" id="color-blue-green" name="theme" value="gradient-blue-green">
                    <label for="color-blue-green" class="gradient-blue-green"></label>
    
                    <input type="radio" id="color-darkblue" name="theme" value="gradient-darkblue">
                    <label for="color-darkblue" class="gradient-darkblue"></label>
    
                    <input type="radio" id="color-red-orange" name="theme" value="gradient-red-orange">
                    <label for="color-red-orange" class="gradient-red-orange"></label>
    
                    <input type="radio" id="color-purple-blue" name="theme" value="gradient-purple-blue">
                    <label for="color-purple-blue" class="gradient-purple-blue"></label>
    
                    <input type="radio" id="color-yellow-green" name="theme" value="gradient-yellow-green">
                    <label for="color-yellow-green" class="gradient-yellow-green"></label>
    
                    <input type="radio" id="color-orange-red" name="theme" value="gradient-orange-red">
                    <label for="color-orange-red" class="gradient-orange-red"></label>
    
                    <input type="radio" id="color-gold-yellow" name="theme" value="gradient-gold-yellow">
                    <label for="color-gold-yellow" class="gradient-gold-yellow"></label>
    
                    <input type="radio" id="color-cyan-blue" name="theme" value="gradient-cyan-blue">
                    <label for="color-cyan-blue" class="gradient-cyan-blue"></label>
    
                    <input type="radio" id="color-lime-green" name="theme" value="gradient-lime-green">
                    <label for="color-lime-green" class="gradient-lime-green"></label>
    
                    <input type="radio" id="color-pink-purple" name="theme" value="gradient-pink-purple">
                    <label for="color-pink-purple" class="gradient-pink-purple"></label>
    
                    <input type="radio" id="color-teal-blue" name="theme" value="gradient-teal-blue">
                    <label for="color-teal-blue" class="gradient-teal-blue"></label>
    
                    <input type="radio" id="color-brown-beige" name="theme" value="gradient-brown-beige">
                    <label for="color-brown-beige" class="gradient-brown-beige"></label>
    
                    <input type="radio" id="color-gray-black" name="theme" value="gradient-gray-black">
                    <label for="color-gray-black" class="gradient-gray-black"></label>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="afk-modal">
    <span class="close-btn" onclick="closeAntiAfkModal()">×</span>
    <h2>Anti-AFK</h2>
    <div class="form-group">
        <label for="afk-cycles">Количество циклов</label>
        <input type="number" id="afk-cycles" min="1" value="10">
    </div>
    <div class="form-group">
        <button class="custom-element" id="afk-start-button">Запуск</button>
    </div>
</div>
<div id="click-on-gui-modal">
    <span class="close-btn" onclick="closeClickOnGuiModal()">×</span>
    <h2>Click On Gui</h2>
    <div class="form-group">
        <label for="bot-slot">Введите номер слота</label>
        <input type="text" id="bot-slot">
    </div>
    <div class="form-group">
        <button class="custom-element" id="click-on-gui-start-button">Нажать</button>
    </div>
</div>

<div id="autocasino-modal">
    <span class="close-btn" onclick="closeAutoCasinoModal()">×</span>
    <h2>FunTime AutoCasino</h2>
    <div class="form-group">
        <label for="autocasino_min_amount">Минимальная сумма</label>
        <input type="number" id="autocasino-min-amount" min="5000" value="5000">
    </div>
    <div class="form-group">
        <button class="custom-element" id="autocasino-start-button">Запуск</button>
    </div>
</div>

<div id="autoway-modal">
    <span class="close-btn" onclick="closeAutowayModal()">×</span>
    <h2>AutoWay</h2>
    <div class="form-group">
        <label for="autoway-x">Координата X:</label>
        <input type="number" id="autoway-x">
    </div>
    <div class="form-group">
        <label for="autoway-z">Координата Z:</label>
        <input type="number" id="autoway-z">
    </div>
    <div class="form-group">
        <button class="custom-element" id="autoway-start-button">Запуск</button>
    </div>
</div>
<div id="follow-modal">
    <span class="close-btn" onclick="closeFollowModal()">×</span>
    <h2>Follow Player</h2>
    <div class="form-group">
        <label for="follow-player-name">Ник игрока</label>
        <input type="text" id="follow-player-name">
    </div>
    <div class="form-group">
        <button type="button" class="custom-element" id="follow-start-button">Запуск</button>
        <button type="button" class="custom-element" id="follow-stop-button" style="display: none;">Остановить</button>
    </div>
</div>
<div id="get-location-modal">
    <span class="close-btn" onclick="closeGetLocationModal()">×</span>
    <h2>Get Location</h2>
    <div class="form-group">
        <label for="player-name">Ник игрока</label>
        <input type="text" id="player-name">
    </div>
    <div class="form-group">
        <button class="custom-element" id="get-location-button">Запуск</button>
    </div>
</div>
<script>
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
    });
    
    home.classList.add('selected');
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const contentDivs = document.querySelectorAll('.content > div');
    const sidebarItems = document.querySelectorAll('.sidebar li');
    let botStarted = false;

    sidebarItems.forEach(item => {
      item.addEventListener('click', function () {
        const id = this.id;

    if (id === 'console' && !botStarted) {
      Swal.fire({
        icon: 'warning',
        title: 'Bot Error',
        text: 'Сначала запустите бота!',
      });
      return;
    }
    
    if (id === 'hud' && !isPremium) {
      Swal.fire({
        title: 'Premium Function',
        text: 'Для использования этой функции требуется Premium подписка!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Купить Premium',
        cancelButtonText: 'Отмена'
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = 'https://funpay.com/users/6829696/';
        }
      });
      return;
    }

        contentDivs.forEach(div => {
          if (div.classList.contains(id + '-content')) {
            div.style.display = 'block';
          } else {
            div.style.display = 'none';
          }
        });
        sidebarItems.forEach(item => {
          item.classList.remove('selected');
        });
        this.classList.add('selected');
      });
    });

    const startButton = document.getElementById('start-button');
    let lastClickTime = 0;
    const throttleTime = 2500;

    startButton.addEventListener('click', () => {
        const now = new Date().getTime();
        if (now - lastClickTime < throttleTime) {
            Swal.fire({
                icon: 'warning',
                title: 'Too many requests',
                text: 'Пожалуйста, повторите попытку позже.',
            });
            return;
        }
            
        lastClickTime = now;
        const username = document.getElementById('username').value;
        const ipAddress = document.getElementById('ip-address').value;
        const port = document.getElementById('port').value;

    if (!username || !ipAddress || !port) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Заполните все поля.',
        });
        return;
    }
    
    if (isNaN(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт должен быть числом.',
        });
        return;
    }
    
    if (port.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт некорректный.',
        });
        return;
    }
    
    if (username.length < 3) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Никнейм некорректный.',
        });
        return;
    }
    
    if (ipAddress.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'IP-адрес некорректный.',
        });
        return;
    }

    const specialChars = /[@#^$%&*()_\[\]{}|~!+\\\/=:;"'<>?,]/;
    const whitespace = /\s/;
    const cyrillic = /[а-яА-ЯёЁ]/;
    
    if (specialChars.test(username) || specialChars.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Специальные символы запрещены.',
        });
        return;
    }
    
    if (whitespace.test(username) || whitespace.test(ipAddress) || whitespace.test(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Пробелы запрещены.',
        });
        return;
    }
    
    if (cyrillic.test(username) || cyrillic.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Русские символы запрещены.',
        });
        return;
    }

        if (botStarted) {
            fetch('http://127.0.0.1:5000/stop-bot', {
                method: 'POST',
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Запуск';
                botStarted = false;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Stopped',
                    text: 'Бот был успешно остановлен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Ошибка при остановке бота.',
                });
            });
        } else {
            fetch('http://127.0.0.1:5000/start-bot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: username,
                    ip_address: ipAddress,
                    port: port,
                }),
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Остановить';
                botStarted = true;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Started',
                    text: 'Бот был успешно запущен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.',
                });
            });
        }
    });

    const afkButton = document.getElementById('anti-afk');
    const afkModal = document.getElementById('afk-modal');
    const afkStartButton = document.getElementById('afk-start-button');

    afkButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        afkModal.style.display = 'block';
    });

    afkStartButton.addEventListener('click', () => {
        const cycles = document.getElementById('afk-cycles').value;
        fetch('http://127.0.0.1:5000/start-antiafk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                cycles: cycles,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Anti-AFK Started',
                text: 'Anti-AFK был успешно запущен!',
            });
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        afkModal.style.display = 'none';
    });

    const ipAddress = document.getElementById('ip-address').value;
    const port = document.getElementById('port').value;
    const autoCasinoButton = document.getElementById('autocasino');
    const autoCasinoModal = document.getElementById('autocasino-modal');
    const autoCasinoStartButton = document.getElementById('autocasino-start-button');

    autoCasinoButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autoCasinoModal.style.display = 'block';
    });

    autoCasinoStartButton.addEventListener('click', () => {
        const amount = document.getElementById('autocasino-min-amount').value;
        fetch('http://127.0.0.1:5000/start-autocasino', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                min_amount: amount,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'AutoCasino Started',
                text: 'AutoCasino был успешно запущен!',
            });
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        autoCasinoModal.style.display = 'none';
    });

    const clickOnGuiButton = document.getElementById('click-on-gui');
    const clickOnGuiModal = document.getElementById('click-on-gui-modal');
    const clickOnGuiStartButton = document.getElementById('click-on-gui-start-button');
    
    clickOnGuiButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        clickOnGuiModal.style.display = 'block';
    });

    clickOnGuiStartButton.addEventListener('click', () => {
        const botSlot = parseInt(document.getElementById('bot-slot').value); 
    
        if (isNaN(botSlot)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректный номер слота.',
            });
            return; 
        }
    
        fetch('http://127.0.0.1:5000/click_on_gui', { 
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ bot_slot: botSlot }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Click On Gui',
                    text: 'Бот кликнул по слоту ' + botSlot + '.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Не удалось выполнить клик.',
                });
            }
        });
        document.getElementById('bot-slot').value = '';
    });

    const autowayButton = document.getElementById('autoway');
    const autowayModal = document.getElementById('autoway-modal');
    const autowayStartButton = document.getElementById('autoway-start-button');

    autowayButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autowayModal.style.display = 'block';
    });

    autowayStartButton.addEventListener('click', () => {
        const x = parseInt(document.getElementById('autoway-x').value);
        const z = parseInt(document.getElementById('autoway-z').value);

        if (isNaN(x) || isNaN(z)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректные координаты X и Z.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/start-autoway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ x: x, z: z }),
        })
            .then(response => {
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'AutoWay started',
                        text: 'Бот начал движение к указанным координатам.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Bot Error',
                        text: 'Не удалось запустить AutoWay.',
                    });
                }
            });
        autowayModal.style.display = 'none';
    });
    
    const consoleLog = document.getElementById('console-log');
    const consoleInput = document.getElementById('console-input');
    const consoleSendButton = document.getElementById('console-send-button');
    
    function logToConsole(message) {
        const messageElement = document.createElement('p');
        messageElement.textContent = message;
        consoleLog.appendChild(messageElement);
        consoleLog.scrollTop = consoleLog.scrollHeight;
    }
    
    consoleSendButton.addEventListener('click', () => {
        const message = consoleInput.value.trim();
        if (message !== "") {
            fetch('http://127.0.0.1:5000/console_message', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({message: message})
            });
            consoleInput.value = ""; 
        }
    });

    function checkForMessages() {
        if (botStarted) {
            fetch('http://127.0.0.1:5000/get_messages')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.text !== '') {
                        logToConsole(data.text);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                });
        }
    }
    
    const followButton = document.querySelector('.function-list li:nth-child(5)');
    const followModal = document.getElementById('follow-modal');
    const followStartButton = document.getElementById('follow-start-button');
    const followStopButton = document.getElementById('follow-stop-button');
    let isFollowing = false; 
    
    followButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        followModal.style.display = 'block';
    });
    
    followStartButton.addEventListener('click', () => {
        const playerName = document.getElementById('follow-player-name').value;
    
        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите ник игрока.',
            });
            return;
        }
    
        fetch('http://127.0.0.1:5000/start-follow', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Started',
                    text: 'Бот начал движение за игроком ' + playerName + '.',
                });
                isFollowing = true;
                followStartButton.style.display = 'none';
                followStopButton.style.display = 'block';
                autowayModal.style.display = 'none';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to start following.',
                });
            }
        });
    });
    
    followStopButton.addEventListener('click', () => {
        fetch('http://127.0.0.1:5000/stop-follow', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Stopped',
                    text: 'Бот прекратил движение.',
                });
                isFollowing = false;
                autowayModal.style.display = 'none';
                followStartButton.style.display = 'block'; 
                followStopButton.style.display = 'none'; 
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Bot Error',
                    text: 'Неизвестная ошибка.',
                });
            }
        });
    });
    
    const getLocationButton = document.querySelector('.function-list li:nth-child(6)'); 
    const getLocationModal = document.getElementById('get-location-modal');
    const getPlayerLocationButton = document.getElementById('get-location-button');
    
    getLocationButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        getLocationModal.style.display = 'block';
    });

    getPlayerLocationButton.addEventListener('click', () => {
        const playerName = document.getElementById('player-name').value;

        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите имя игрока.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/get-coordinates', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
            .then(response => response.json()) 
            .then(data => { 
                if (data.success) { 
                   Swal.fire({
                        icon: 'success',
                        title: 'Get Location',
                        text: 'Информация выведена в чат.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Не удалось получить координаты.',
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.', 
                });
            });

        getLocationModal.style.display = 'none'; 
    });

    const colorOptions = document.querySelectorAll('.color-options input[type="radio"]');
    const body = document.body; 
    const sidebar = document.querySelector('.sidebar');
    const formGroups = document.querySelectorAll('.form-group');
    const consoleContent = document.querySelector('.console-content');
    const content = document.querySelector('.content');
    
    colorOptions.forEach(option => {
        option.addEventListener('change', function() {
            const selectedGradient = this.value;
    
            body.className = '';
            sidebar.className = 'sidebar';
            content.className = 'content';

            body.classList.add(selectedGradient);
            sidebar.classList.add(selectedGradient);
            content.classList.add(selectedGradient);
    
            formGroups.forEach(formGroup => {
                formGroup.className = 'form-group';
                formGroup.classList.add(selectedGradient);
            });
    
            consoleContent.className = 'console-content';
            consoleContent.classList.add(selectedGradient);
        });
    });
    
    let isPremium;

    fetch('http://127.0.0.1:5000/check_premium')
    .then(response => response.json())
    .then(data => {
        isPremium = data.isPremium; 
    })
    .catch(error => console.error('Fetch Error:', error));


    setInterval(checkForMessages, 600);
    
    function closeAutoCasinoModal() {
        autoCasinoModal.style.display = 'none';
    }
    
    function closeGetLocationModal() {
        getLocationModal.style.display = 'none';
    }

    function closeFollowModal() {
        followModal.style.display = 'none';
    }

    function closeAutowayModal() {
        autowayModal.style.display = 'none';
    }

    function closeClickOnGuiModal() {
        clickOnGuiModal.style.display = 'none';
    }

    function closeAntiAfkModal() {
        afkModal.style.display = 'none';
    }

</script>
</body>
</html>
"""#line:1653
app =Flask (__name__ )#line:1655
CORS (app )#line:1656
bot_started =False #line:1658
@app .route ('/start-bot',methods =['POST'])#line:1660
def start_bot_route ():#line:1661
    global bot_started #line:1662
    if bot_started :#line:1663
        return jsonify ({'success':False ,'message':'Бот уже запущен.'})#line:1664
    OOOOO0OOOOOOO0O0O =request .json #line:1665
    OO000O0OOOOOO0OOO =OOOOO0OOOOOOO0O0O ['username']#line:1666
    OO0000OOOO00OO00O =OOOOO0OOOOOOO0O0O ['ip_address']#line:1667
    O00000OOO0O0OO0OO =OOOOO0OOOOOOO0O0O ['port']#line:1668
    O000000OOO00O00OO =Thread (target =start_bot ,args =(OO000O0OOOOOO0OOO ,OO0000OOOO00OO00O ,O00000OOO0O0OO0OO ))#line:1669
    O000000OOO00O00OO .start ()#line:1670
    bot_started =True #line:1671
    return jsonify ({'success':True })#line:1672
@app .route ('/stop-bot',methods =['POST'])#line:1674
def stop_bot_route ():#line:1675
    global bot_started ,bot #line:1676
    if not bot_started :#line:1677
        return jsonify ({'success':False ,'message':'Бот не запущен.'})#line:1678
    O00O0O0OOOO00O0OO =Thread (target =stop_bot )#line:1679
    O00O0O0OOOO00O0OO .start ()#line:1680
    bot_started =False #line:1681
    return jsonify ({'success':True })#line:1682
@app .route ('/start-antiafk',methods =['POST'])#line:1684
def start_antiafk_route ():#line:1685
    OOO00OO00OOOO00O0 =request .json #line:1686
    OOO0OOO00OO00O0O0 =int (OOO00OO00OOOO00O0 ['cycles'])#line:1687
    OO00O000OOO000O0O =Thread (target =start_AntiAFK ,args =(OOO0OOO00OO00O0O0 ,))#line:1688
    OO00O000OOO000O0O .start ()#line:1689
    return jsonify ({'success':True })#line:1690
@app .route ('/click_on_gui',methods =['POST'])#line:1692
def click_on_gui_route ():#line:1693
    O00O0OOO00OOO00O0 =request .json #line:1694
    OO000OO0O00000000 =int (O00O0OOO00OOO00O0 .get ('bot_slot',0 ))#line:1695
    OO0OOO0OOOOO0OO00 =Thread (target =click_on_gui ,args =(OO000OO0O00000000 ,))#line:1696
    OO0OOO0OOOOO0OO00 .start ()#line:1697
    return jsonify ({'success':True })#line:1698
@app .route ('/start-autoway',methods =['POST'])#line:1700
def start_autoway_route ():#line:1701
    O0O0OO00O0O0OOOO0 =request .json #line:1702
    O0OO0OO000OOOO0O0 =int (O0O0OO00O0O0OOOO0 ['x'])#line:1703
    OOOOOOO000OOOOO00 =int (O0O0OO00O0O0OOOO0 ['z'])#line:1704
    OO000000OO0OOO0O0 =Thread (target =autoway ,args =(O0OO0OO000OOOO0O0 ,OOOOOOO000OOOOO00 ,))#line:1705
    OO000000OO0OOO0O0 .start ()#line:1706
    return jsonify ({'success':True })#line:1707
@app .route ('/check_premium',methods =['GET'])#line:1709
def check_premium_route ():#line:1710
    O0OO0OOOOOO0000OO =get_hwid ()#line:1711
    if O0OO0OOOOOO0000OO :#line:1712
        OO0OOO0OOOO0OOOOO =hash_hwid (O0OO0OOOOOO0000OO )#line:1713
        OO0OO000O0OO00000 =check_premium (OO0OOO0OOOO0OOOOO )#line:1714
        return jsonify ({'isPremium':OO0OO000O0OO00000 })#line:1715
    else :#line:1716
        return jsonify ({'isPremium':False })#line:1717
@app .route ('/start-follow',methods =['POST'])#line:1719
def start_follow_route ():#line:1720
    global isFollowing #line:1721
    if isFollowing :#line:1722
        return jsonify ({'success':False ,'message':'Bot is already following.'})#line:1723
    O00000000OOOOO000 =request .json #line:1725
    O000O00O00O0OO00O =O00000000OOOOO000 ['player']#line:1726
    O00OOOOOO0OOO0OO0 =Thread (target =follow ,args =(O000O00O00O0OO00O ,))#line:1727
    O00OOOOOO0OOO0OO0 .start ()#line:1728
    isFollowing =True #line:1729
    return jsonify ({'success':True })#line:1730
@app .route ('/stop-follow',methods =['POST'])#line:1732
def stop_follow_route ():#line:1733
    global isFollowing #line:1734
    if not isFollowing :#line:1735
        return jsonify ({'success':False ,'message':'Bot is not currently following.'})#line:1736
    isFollowing =False #line:1738
    bot_unfollow ()#line:1739
    return jsonify ({'success':True })#line:1741
@app .route ('/get-coordinates',methods =['POST'])#line:1743
def get_coordinates_route ():#line:1744
    OOOO00O000O00O0OO =request .json #line:1745
    OOOOOOO0O0O00O000 =OOOO00O000O00O0OO ['player']#line:1746
    O000O00O0OOO00O0O =Thread (target =get_coordinates ,args =(OOOOOOO0O0O00O000 ,))#line:1747
    O000O00O0OOO00O0O .start ()#line:1748
    return jsonify ({'success':True })#line:1749
@app .route ('/start-autocasino',methods =['POST'])#line:1751
def start_autocasino_route ():#line:1752
    O00O0000000O00O0O =request .json #line:1753
    O0O0OOOO0O000000O =int (O00O0000000O00O0O .get ('min_amount'))#line:1754
    OO0OO00O000OO00O0 =Thread (target =autocasino ,args =(O0O0OOOO0O000000O ,))#line:1755
    OO0OO00O000OO00O0 .start ()#line:1756
    return jsonify ({'success':True })#line:1757
@app .route ('/console_message',methods =['POST'])#line:1759
def console_message_route ():#line:1760
    O0000O00OOOOO0OOO =request .get_json ()#line:1761
    if O0000O00OOOOO0OOO and 'message'in O0000O00OOOOO0OOO :#line:1762
        OO000OOO0OO00O0O0 =O0000O00OOOOO0OOO ['message']#line:1763
        OOOOOOO0OO0O0OOOO =Thread (target =handle_console_message ,args =(OO000OOO0OO00O0O0 ,))#line:1764
        OOOOOOO0OO0O0OOOO .start ()#line:1765
    return jsonify ({'success':True })#line:1766
@app .route ('/get_messages')#line:1768
def get_messages ():#line:1769
    try :#line:1770
        OO0O000OO0O00OOOO =message_queue .get (timeout =0.1 )#line:1771
        return jsonify ({'text':OO0O000OO0O00OOOO .get ('text','')})#line:1772
    except Empty :#line:1773
        return jsonify ({'text':''})#line:1774
def handle_console_message (OO0O0000OO0000OOO ):#line:1776
    global bot #line:1777
    if bot :#line:1778
        bot .chat (OO0O0000OO0000OOO )#line:1779
def get_bot_message ():#line:1781
    global last_bot_message #line:1782
    return last_bot_message #line:1783
def start_AntiAFK (OO000O0OOOO0OOO00 ):#line:1785
    run (bot_antiafk (OO000O0OOOO0OOO00 ))#line:1786
def autoway (OOOOO00000O00O000 ,O000000O000OOO000 ):#line:1788
    run (bot_autoway (OOOOO00000O00O000 ,O000000O000OOO000 ))#line:1789
def follow (O00O00O0OOOO0O0OO ):#line:1791
    run (bot_follow (O00O00O0OOOO0O0OO ))#line:1792
def click_on_gui (O0000O0OOO000OOO0 ):#line:1794
    run (bot_click_on_gui (O0000O0OOO000OOO0 ))#line:1795
def get_coordinates (OO00OO000OOO00O00 ):#line:1797
    run (bot_get_coordinates (OO00OO000OOO00O00 ))#line:1798
def autocasino (OO0000OO00O00O000 ):#line:1800
    run (bot_autocasino (OO0000OO00O00O000 ))#line:1801
def start_bot (O000OOOO0OOO0OOOO ,O00O0OO0O0O0O0O00 ,O0O0000000OO0OO0O ):#line:1803
    run (start_bot_async (O000OOOO0OOO0OOOO ,O00O0OO0O0O0O0O00 ,O0O0000000OO0OO0O ))#line:1804
def stop_bot ():#line:1806
    run (bot_disconnect ())#line:1807
def bot_open_auction ():#line:1809
    pass #line:1810
async def start_bot_async (OO00O000O0O0OOO00 ,O0OO0000O0OO0000O ,O000OO0OOO0000OOO ):#line:1812
    global bot #line:1813
    bot =mineflayer .createBot ({'username':OO00O000O0O0OOO00 ,'host':O0OO0000O0OO0000O ,'port':int (O000OO0OOO0000OOO ),'hideErrors':True })#line:1819
    bot .loadPlugin (pathfinder .pathfinder )#line:1820
    @On (bot ,'message')#line:1822
    def O000O0O000000000O (O00O000OOOOOOOOO0 ,OO0000OOO00OOOO0O ,*OOOOO0OOO0O0OO00O ):#line:1823
        global needed_item ,message_text #line:1824
        if OO0000OOO00OOOO0O .extra is None :#line:1825
            return False #line:1826
        message_text ={'text':''}#line:1827
        if OO0000OOO00OOOO0O .extra is not None :#line:1828
            for O00O0O000OO00O00O in OO0000OOO00OOOO0O .extra :#line:1829
                if hasattr (O00O0O000OO00O00O ,'text')and O00O0O000OO00O00O .text is not None :#line:1830
                    message_text ['text']+=O00O0O000OO00O00O .text #line:1831
        message_queue .put (message_text )#line:1832
async def bot_autocasino (OO00OOO00O0OO0OOO ):#line:1834
    def O00000OOO0O00O0OO ():#line:1835
        time .sleep (0.5 )#line:1836
        bot .chat (f"! Я новый казино бот! Я даю возможность сыграть вам 1 на 1, для этого просто отправьте мне от ${OO00OOO00O0OO0OOO}.")#line:1837
        time .sleep (1.5 )#line:1838
    def O0OOO0OOOOO0O00O0 (O000O0O0000O0OO0O ):#line:1840
        time .sleep (1 )#line:1841
        bot .chat (f"/msg {O000O0O0000O0OO0O} Извините, но минимальная ставка - ${OO00OOO00O0OO0OOO}. Ставка не возвращается")#line:1842
        time .sleep (1.5 )#line:1843
    def OO00OOOOOOOOO0O00 (O0OOO0O00O000OO0O ,OOOOOOOO00O0OOOOO ):#line:1845
        bot .chat (f"/pay {O0OOO0O00O000OO0O} {OOOOOOOO00O0OOOOO}")#line:1846
        time .sleep (1 )#line:1847
        bot .chat (f"/pay {O0OOO0O00O000OO0O} {OOOOOOOO00O0OOOOO}")#line:1848
        time .sleep (1 )#line:1849
        bot .chat (f"/msg {O0OOO0O00O000OO0O} Вы уже участвуете в игре. Ваша ставка ${OOOOOOOO00O0OOOOO} возвращена.")#line:1850
    def O00O0O0O00O000O0O (OOO0O00O0OO00O0OO ,O0OO0O0000OO0OO0O ,O00O00O000O0OO0OO ):#line:1852
        bot .chat (f"/msg {O0OO0O0000OO0OO0O} Ты проиграл игроку {OOO0O00O0OO00O0OO}. Его ставка: {O00O00O000O0OO0OO}")#line:1853
    def O00O000O000OO000O (OOO0O000O0O0O0OO0 ,OO0O00O0O000O0O00 ,OO0O0000OO0OOO0OO ,O0O0OOO0OO0O0O0OO ):#line:1855
        OO0O0O00OO0OOO0O0 =OO0O0000OO0OOO0OO +O0O0OOO0OO0O0O0OO #line:1856
        OOO00000O000O0OO0 =int (OO0O0O00OO0OOO0O0 *0.5 )#line:1857
        OO00O0O0O000000OO =OO0O0O00OO0OOO0O0 -OOO00000O000O0OO0 #line:1858
        OO0000OOO00O0OOOO =OO0O0000OO0OOO0OO +int (OO00O0O0O000000OO *0.50 )if OOO0O000O0O0O0OO0 ==first_player else O0O0OOO0OO0O0O0OO +int (OO00O0O0O000000OO *0.50 )#line:1859
        bot .chat (f"/pay {OOO0O000O0O0O0OO0} {OO0000OOO00O0OOOO}")#line:1861
        time .sleep (2 )#line:1862
        bot .chat (f"/pay {OOO0O000O0O0O0OO0} {OO0000OOO00O0OOOO}")#line:1863
        time .sleep (1.25 )#line:1864
        bot .chat (f"/msg {OOO0O000O0O0O0OO0} Ты выиграл игрока {OO0O00O0O000O0O00}. Твой выигрыш: {OO0000OOO00O0OOOO}")#line:1865
        time .sleep (1.25 )#line:1866
        bot .chat (f"/msg {OO0O00O0O000O0O00} Ты проиграл игроку {OOO0O000O0O0O0OO0}. Его ставка: {OO0O0000OO0OOO0OO if OOO0O000O0O0O0OO0 == first_player else O0O0OOO0OO0O0O0OO}")#line:1867
        time .sleep (0.5 )#line:1868
        bot .chat ("/balance")#line:1869
        time .sleep (0.5 )#line:1870
    def OOOO000OOOOO00000 ():#line:1872
        global first_player ,second_player ,first_bet ,second_bet ,waiting_for_second_player ,timeout_timer #line:1873
        first_player =None #line:1874
        second_player =None #line:1875
        first_bet =0 #line:1876
        second_bet =0 #line:1877
        waiting_for_second_player =None #line:1878
        if timeout_timer is not None :#line:1879
            timeout_timer .cancel ()#line:1880
            timeout_timer =None #line:1881
    def OOOO00OOO00OOOO00 ():#line:1883
        global first_player ,first_bet #line:1884
        if first_player and second_player is None :#line:1885
            bot .chat (f'/msg {first_player} Время ожидания второго игрока истекло. Ваша ставка ${first_bet} возвращена.')#line:1886
            OO00OOOOOOOOO0O00 (first_player ,first_bet )#line:1887
            OOOO000OOOOO00000 ()#line:1888
            time .sleep (1.5 )#line:1889
    def O000000O0OO00O0OO ():#line:1891
        while True :#line:1892
            O00000OOO0O00O0OO ()#line:1893
            OO0O00O0000O000O0 =randint (15 ,41 )#line:1894
            time .sleep (OO0O00O0000O000O0 )#line:1895
    @On (bot ,'message')#line:1897
    def O0O00OOOO0OOO00O0 (_O000OOOO0O0OOOO00 ,OO0O000OOOO0OOOOO ,*_O000O0000OOO0OOOO ):#line:1898
        global first_player ,second_player ,first_bet ,second_bet ,min_amount ,waiting_for_second_player ,timeout_timer #line:1899
        if OO0O000OOOO0OOOOO .extra is None :#line:1901
            return False #line:1902
        O00O0OO00O00O0O0O =''.join ([O0OO000000OO00OOO .text for O0OO000000OO00OOO in OO0O000OOOO0OOOOO .extra ])#line:1904
        if '[$] Ваш баланс'in O00O0OO00O00O0O0O :#line:1906
            OOOOOO00OO0O0OO0O =O00O0OO00O00O0O0O .split (":")#line:1907
            if len (OOOOOO00OO0O0OO0O )>1 :#line:1908
                O0000000O000OOOO0 =OOOOOO00OO0O0OO0O [1 ].strip ()#line:1909
        if 'получено от игрока'in O00O0OO00O00O0O0O :#line:1911
            OOO0OO00OOO000OO0 =r'\$([\d,]+).*получено от игрока (\w+)'#line:1912
            O00O00OOOOO00OOO0 =search (OOO0OO00OOO000OO0 ,O00O0OO00O00O0O0O )#line:1913
            if O00O00OOOOO00OOO0 :#line:1915
                O00O0000OOO0O00OO =int (O00O00OOOOO00OOO0 .group (1 ).replace (',',''))#line:1916
                O0OOO0OOOO0000O00 =O00O00OOOOO00OOO0 .group (2 )#line:1917
                if O00O0000OOO0O00OO !=1 and O00O0000OOO0O00OO <min_amount :#line:1919
                    O0OOO0OOOOO0O00O0 (O0OOO0OOOO0000O00 )#line:1920
                    return #line:1921
                if O0OOO0OOOO0000O00 ==first_player or O0OOO0OOOO0000O00 ==second_player :#line:1923
                    OO00OOOOOOOOO0O00 (O0OOO0OOOO0000O00 ,O00O0000OOO0O00OO )#line:1924
                    return #line:1925
                if first_player is None :#line:1927
                    first_player =O0OOO0OOOO0000O00 #line:1928
                    first_bet =O00O0000OOO0O00OO #line:1929
                    waiting_for_second_player =True #line:1930
                    if timeout_timer is not None :#line:1931
                        timeout_timer .cancel ()#line:1932
                    timeout_timer =Timer (90 ,OOOO00OOO00OOOO00 )#line:1933
                    timeout_timer .start ()#line:1934
                    bot .chat (f"/msg {O0OOO0OOOO0000O00} Ты зарегистрирован как первый игрок. Ставка: ${first_bet}")#line:1935
                elif second_player is None :#line:1936
                    O000OO0O00OOO00O0 =max (min_amount ,int (first_bet *0.8 ))#line:1937
                    OO0OO000OO0OO0O0O =int (first_bet *1.2 )#line:1938
                    if O000OO0O00OOO00O0 <=O00O0000OOO0O00OO <=OO0OO000OO0OO0O0O :#line:1939
                        second_player =O0OOO0OOOO0000O00 #line:1940
                        second_bet =O00O0000OOO0O00OO #line:1941
                        waiting_for_second_player =False #line:1942
                        if timeout_timer is not None :#line:1943
                            timeout_timer .cancel ()#line:1944
                            timeout_timer =None #line:1945
                    else :#line:1946
                        bot .chat (f"/msg {O0OOO0OOOO0000O00} Ставка некорректная. Подходящая ставка: ${O000OO0O00OOO00O0}-${OO0OO000OO0OO0O0O}. Ваша ставка ${O00O0000OOO0O00OO} возвращена.")#line:1947
                        OO00OOOOOOOOO0O00 (O0OOO0OOOO0000O00 ,O00O0000OOO0O00OO )#line:1948
                        sleep (1.5 )#line:1949
                if first_player and second_player :#line:1951
                    O0OOO0000OOO00O0O =choice ([first_player ,second_player ])#line:1952
                    O0OO00OOOOOOOO00O =first_player if O0OOO0000OOO00O0O ==second_player else second_player #line:1953
                    O00O000O000OO000O (O0OOO0000OOO00O0O ,O0OO00OOOOOOOO00O ,first_bet ,second_bet )#line:1955
                    O00O0O0O00O000O0O (O0OOO0000OOO00O0O ,O0OO00OOOOOOOO00O ,first_bet if O0OOO0000OOO00O0O ==first_player else second_bet )#line:1956
                    OOOO000OOOOO00000 ()#line:1957
    OO00OO000OOO0OO00 =Thread (target =O000000O0OO00O0OO )#line:1959
    OO00OO000OOO0OO00 .daemon =True #line:1960
    OO00OO000OOO0OO00 .start ()#line:1961
async def bot_antiafk (O0OOOO00OO0OOO00O ):#line:1963
    for _OOOO0OOOO0O0O000O in range (O0OOOO00OO0OOO00O ):#line:1964
        bot .setControlState ('right',True )#line:1965
        time .sleep (0.5 )#line:1966
        bot .setControlState ('right',False )#line:1967
        time .sleep (0.5 )#line:1968
        bot .setControlState ('left',True )#line:1969
        time .sleep (0.5 )#line:1970
        bot .setControlState ('left',False )#line:1971
        time .sleep (0.5 )#line:1972
async def bot_get_coordinates (OOO00O0000OO00OO0 ):#line:1974
    if OOO00O0000OO00OO0 in bot .players :#line:1975
        OO0OO00O000O0O0O0 =bot .players [OOO00O0000OO00OO0 ].entity #line:1976
        if OO0OO00O000O0O0O0 is None or not hasattr (OO0OO00O000O0O0O0 ,'position'):#line:1977
            bot .chat (f"Игрок с именем {OOO00O0000OO00OO0} не найден, либо не находится в радиусе 4 чанков.")#line:1978
            return jsonify ({'success':False })#line:1979
        OO00O000000OO0O00 =OO0OO00O000O0O0O0 .position #line:1981
        OOO0O0OO00O0O0O0O ="{:.1f}".format (OO00O000000OO0O00 .x )#line:1982
        O00000O0O0000OOOO ="{:.1f}".format (OO00O000000OO0O00 .y )#line:1983
        O0000000O0O0O0000 ="{:.1f}".format (OO00O000000OO0O00 .z )#line:1984
        bot .chat (f"Локация игрока {OOO00O0000OO00OO0}: x={OOO0O0OO00O0O0O0O}, y={O00000O0O0000OOOO}, z={O0000000O0O0O0000}")#line:1986
        return jsonify ({'success':True })#line:1987
    else :#line:1988
        return jsonify ({'success':False })#line:1989
async def bot_autoway (OOO0O00OOOOO000O0 ,O000O0OO00OOOO00O ,*O0O0OO0O00O00000O ):#line:1991
    OOO0OO0OOO0O0OO0O =require ("minecraft-data")(bot .version )#line:1992
    OOOO000OO00O00O00 =pathfinder .Movements (bot ,OOO0OO0OOO0O0OO0O )#line:1993
    OOOO000OO00O00O00 .allowFreeMotion =True #line:1995
    OOOO000OO00O00O00 .allowSprinting =False #line:1996
    bot .pathfinder .setMovements (OOOO000OO00O00O00 )#line:1998
    bot .look (uniform (-180 ,180 ),uniform (-90 ,90 ))#line:2000
    bot .pathfinder .setGoal (pathfinder .goals .GoalNear (OOO0O00OOOOO000O0 ,bot .entity .position .y ,O000O0OO00OOOO00O ,1 ))#line:2001
    bot .setControlState ('jump',True )#line:2002
    bot .look (uniform (-180 ,180 ),uniform (-90 ,90 ))#line:2003
async def bot_follow (OOO0OO0O0OO0O000O ):#line:2005
    global isFollowing #line:2006
    if isFollowing :#line:2007
        O0O0O000O0000O0O0 =require ("minecraft-data")(bot .version )#line:2008
        OOO000OO0O0OO00OO =pathfinder .Movements (bot ,O0O0O000O0000O0O0 )#line:2009
        OOO000OO0O0OO00OO .allowFreeMotion =True #line:2011
        OOO000OO0O0OO00OO .allowSprinting =False #line:2012
        OOOO000OOO0O0OOO0 =bot .players [OOO0OO0O0OO0O000O ].entity #line:2014
        bot .pathfinder .setMovements (OOO000OO0O0OO00OO )#line:2015
        OO0O0O00O0OO00O0O =GoalFollow (OOOO000OOO0O0OOO0 ,1 )#line:2016
        bot .pathfinder .setGoal (OO0O0O00O0OO00O0O ,True )#line:2017
        await sleep (0.1 )#line:2018
    if not isFollowing :#line:2019
        bot .pathfinder .setGoal (None )#line:2020
async def bot_spammer (O0OOOO0O0OO0OO000 ,OOO00OOOO000OO000 ,OOO000O0O000OOO00 ,*OO0000000OOOOOOOO ):#line:2022
    time .sleep (OOO000O0O000OOO00 )#line:2023
    OO00OOOOOOOO00OO0 =bot .players #line:2024
    for O0000O00OOO00OOOO in OO00OOOOOOOO00OO0 :#line:2025
        OO000O00O0O0OO000 =OO00OOOOOOOO00OO0 [O0000O00OOO00OOOO ]["username"]#line:2026
        time .sleep (3.5 )#line:2027
        bot .chat (f'{O0OOOO0O0OO0OO000} {OO000O00O0O0OO000} {OOO00OOOO000OO000}')#line:2028
def use_on_entity (O00OOOO0OOOO0000O ):#line:2030
    global target_entity #line:2031
    try :#line:2032
        O00O000000OOO000O =require ('minecraft-data')(bot .version )#line:2033
        O000O0000OOOO00O0 =pathfinder .Movements (bot ,O00O000000OOO000O )#line:2034
        bot .pathfinder .setMovements (O000O0000OOOO00O0 )#line:2035
        bot .pathfinder .setGoal (pathfinder .goals .GoalNear (O00OOOO0OOOO0000O .position .x ,O00OOOO0OOOO0000O .position .y ,O00OOOO0OOOO0000O .position .z ,1 ))#line:2036
        target_entity =O00OOOO0OOOO0000O #line:2037
    except Exception as OO0O00000OO0O00OO :#line:2038
        print (f"Error handling entity: {OO0O00000OO0O00OO}")#line:2039
def bot_unfollow ():#line:2041
    O000O0OOOOOOOO0OO =require ("minecraft-data")(bot .version )#line:2042
    O0O00O00000O0OO0O =pathfinder .Movements (bot ,O000O0OOOOOOOO0OO )#line:2043
    bot .pathfinder .setMovements (O0O00O00000O0OO0O )#line:2045
    bot .pathfinder .setGoal (None )#line:2046
async def bot_click_on_gui (OOOO00000OOO00O0O ):#line:2048
    try :#line:2049
        time .sleep (1 )#line:2050
        bot .clickWindow (OOOO00000OOO00O0O ,0 ,0 )#line:2051
    except errors .JavaScriptError :#line:2052
        pass #line:2053
async def bot_disconnect ():#line:2055
    bot .quit ()#line:2056
def get_wmi_data (O00O0000OOO0OO0O0 ):#line:2058
    try :#line:2059
        OO0OOO00OOOO0OO00 =check_output (O00O0000OOO0OO0O0 ,shell =True ).decode ().split ('\n')[1 ].strip ()#line:2060
        return OO0OOO00OOOO0OO00 #line:2061
    except Exception as O0000OO0O00OO00O0 :#line:2062
        print (f"Ошибка при выполнении команды {O00O0000OOO0OO0O0}: {O0000OO0O00OO00O0}")#line:2063
        return None #line:2064
def get_hwid ():#line:2066
    OOOO00OOOOOOOO0O0 =get_wmi_data ('wmic baseboard get serialnumber')#line:2067
    OOO000O000O00OOOO =get_wmi_data ('wmic cpu get processorid')#line:2068
    OO0OOO0O0O0OOOO00 =get_wmi_data ('wmic diskdrive get serialnumber')#line:2069
    O0O0OOO00O00000O0 =get_wmi_data ('wmic bios get serialnumber')#line:2070
    O00O0OO00OOO0OOOO =get_wmi_data ('wmic os get serialnumber')#line:2071
    OO0OOOO00OOO00000 =f"{OOOO00OOOOOOOO0O0}{OOO000O000O00OOOO}{OO0OOO0O0O0OOOO00}{O0O0OOO00O00000O0}{O00O0OO00OOO0OOOO}"#line:2073
    return OO0OOOO00OOO00000 #line:2074
def hash_hwid (O00000000O000OO0O ):#line:2076
    OOO0OO00000O00OOO =sha512 (O00000000O000OO0O .encode ()).hexdigest ()#line:2077
    return OOO0OO00000O00OOO #line:2078
def get_premium_hwids ():#line:2080
    O0O00OO0O00000OOO ="https://raw.githubusercontent.com/rimero321/entityclient/main/hwids.txt"#line:2081
    O0OOOOO0OO0OOO000 =get (O0O00OO0O00000OOO )#line:2082
    OO000000OO00OO000 =O0OOOOO0OO0OOO000 .text .splitlines ()#line:2083
    return OO000000OO00OO000 #line:2084
def check_premium (OOOOO0OOO0OOOOO0O ):#line:2086
    if not OOOOO0OOO0OOOOO0O :#line:2087
        return False #line:2088
    O0O0O0000O00O0OO0 =get_premium_hwids ()#line:2089
    return OOOOO0OOO0OOOOO0O in O0O0O0000O00O0OO0 #line:2090
def client_status ():#line:2092
    OO0OOOOOOOOOOOO00 =get ('https://raw.githubusercontent.com/rimero321/entityclient/main/versions.txt')#line:2093
    if OO0OOOOOOOOOOOO00 .status_code ==200 :#line:2094
        O00O0O0OO00OO0OOO =OO0OOOOOOOOOOOO00 .text .split ('\n')#line:2095
        O0OO00000O0O00O0O =O00O0O0OO00OO0OOO [0 ].split (': ')[1 ].strip ()#line:2096
        return O0OO00000O0O00O0O #line:2097
status =str (client_status ())#line:2099
class MainWindow (QMainWindow ):#line:2101
    def __init__ (O000O0000O0OOOOO0 ):#line:2102
        super ().__init__ ()#line:2103
        O000O0000O0OOOOO0 .setWindowTitle (' ')#line:2104
        O000O0000O0OOOOO0 .setGeometry (100 ,100 ,1050 ,700 )#line:2105
        O000O0000O0OOOOO0 .setFixedSize (1050 ,700 )#line:2106
        O000O0000O0OOOOO0 .browser =QWebEngineView ()#line:2107
        O000O0000O0OOOOO0 .browser .setHtml (html_content )#line:2108
        O000O0000O0OOOOO0 .setCentralWidget (O000O0000O0OOOOO0 .browser )#line:2109
        O000O0000O0OOOOO0 .channel =QWebChannel ()#line:2110
        O000O0000O0OOOOO0 .browser .page ().setWebChannel (O000O0000O0OOOOO0 .channel )#line:2111
        O000O0000O0OOOOO0 .channel .registerObject ("bridge",O000O0000O0OOOOO0 )#line:2112
if __name__ =='__main__':#line:2114
    if status =='True':#line:2115
        flask_thread =Thread (target =lambda :app .run (port =5000 ,debug =False ,use_reloader =False ))#line:2116
        flask_thread .start ()#line:2117
        app_qt =QApplication (argv )#line:2119
        window =MainWindow ()#line:2120
        window .show ()#line:2121
        exit (app_qt .exec_ ())#line:2122
    else :#line:2123
        messagebox .showerror ("Entity Client","Доступна новая версия.")#line:2124

# let client live
# let client live

from javascript .errors import JavaScriptError #line:1
from flask import Flask ,request ,jsonify ,Response #line:3
from flask_cors import CORS #line:4
from PyQt5 .QtWidgets import QApplication ,QMainWindow #line:5
from PyQt5 .QtWebEngineWidgets import QWebEngineView #line:6
from PyQt5 .QtWebChannel import QWebChannel #line:7
from tkinter import messagebox #line:8
from javascript import require ,On ,errors #line:9
from random import uniform #line:10
from sys import exit ,argv #line:11
from asyncio import run ,sleep #line:12
from threading import Thread ,Timer ,Event #line:13
from queue import Queue ,Empty #line:14
from hashlib import sha512 #line:15
from requests import get #line:16
from subprocess import check_output #line:17
from re import search #line:18
from pypresence import Presence #line:19
from psutil import process_iter #line:20
from random import choice ,randint #line:21
import time #line:22
mineflayer =require ('mineflayer')#line:24
pathfinder =require ('mineflayer-pathfinder')#line:25
GoalFollow =pathfinder .goals .GoalFollow #line:26
isFollowing =False #line:28
task_queue =Queue ()#line:29
first_player =None #line:31
second_player =None #line:32
first_bet =0 #line:33
second_bet =0 #line:34
min_amount =5000 #line:35
waiting_for_second_player =None #line:36
timeout_timer =None #line:37
scam_version =False #line:39
autocasino_status =False #line:40
discordrpc =False #line:42
last_bot_message =""#line:44
message_text =""#line:45
message_queue =Queue ()#line:46
html_content =r"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@4/dark.css">
    <style>
        body {
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #fff;
            font-size: 18px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            background-color: #111;
        }
        .container {
            display: flex;
            height: 100vh;
        }
        .sidebar {
            background-color: #222;
            padding: 20px;
            width: 300px;
        }
        .sidebar h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: bold;
        }
        .sidebar ul {
            list-style: none;
            padding: 0;
        }
        .sidebar li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        .sidebar li:hover {
            background-color: #333;
        }
        
        .sidebar.gradient-blue-green { background-image: linear-gradient(to right, blue, green); }
        .sidebar.gradient-darkblue { background-image: linear-gradient(to right, darkblue, #222); }
        .sidebar.gradient-red-orange { background-image: linear-gradient(to right, red, orange); }
        .sidebar.gradient-purple-blue { background-image: linear-gradient(to right, purple, blue); }
        .sidebar.gradient-yellow-green { background-image: linear-gradient(to right, yellow, green); }
        .sidebar.gradient-orange-red { background-image: linear-gradient(to right, darkred, #500000); }
        .sidebar.gradient-gold-yellow { background-image: linear-gradient(to right, gold, yellow); }
        .sidebar.gradient-cyan-blue { background-image: linear-gradient(to right, cyan, blue); }
        .sidebar.gradient-lime-green { background-image: linear-gradient(to right, lime, green); }
        .sidebar.gradient-pink-purple { background-image: linear-gradient(to right, pink, purple); }
        .sidebar.gradient-teal-blue { background-image: linear-gradient(to right, teal, blue); }
        .sidebar.gradient-brown-beige { background-image: linear-gradient(to right, brown, beige); }
        .sidebar.gradient-gray-black { background-image: linear-gradient(to right, gray, black); }
        
        .time {
            font-size: 16px;
            color: #aaa;
            margin-top: 20px;
        }
        .theme {
            display: none;
        }
        .content {
            flex-grow: 1;
            background-color: #111;
            padding: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .home-content, .misc-content, .ai-content, .custom-function-content {
            width: 500px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 20px;
            font-weight: bold;
        }
        .form-group input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 17px;
            transition: background-color 0.2s;
        }
        .form-group button:hover {
            background-color: #286090;
        }
        .content > div {
            display: none;
        }
        .content > div:first-child {
            display: block;
        }
        body.dark {
            background-color: #111;
        }
        body.dark .content {
            background-color: #111;
        }

        .function-list {
            list-style: none;
            padding: 0;
        }
        .function-list li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
            background-color: #333;
            margin-bottom: 10px;
        }
        .function-list li:hover {
            background-color: #444;
        }
        .selected {
            background-color: #444 !important;
        }
    
        #afk-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #afk-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #afk-modal .form-group {
            margin-bottom: 20px;
        }
        #afk-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #afk-modal .form-group input,
        #afk-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #afk-modal .form-group input::-webkit-outer-spin-button,
        #afk-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #afk-modal .form-group input:focus,
        #afk-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #afk-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #afk-modal .form-group button:hover {
            background-color: #286090;
        }
        #afk-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #afk-modal .close-btn:hover {
            color: #fff;
        }

        #start-button {
            outline: none;
        }

        #click-on-gui-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #click-on-gui-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #click-on-gui-modal .form-group {
            margin-bottom: 20px;
        }
        #click-on-gui-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #click-on-gui-modal .form-group input,
        #click-on-gui-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #click-on-gui-modal .form-group input::-webkit-outer-spin-button,
        #click-on-gui-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #click-on-gui-modal .form-group input:focus,
        #click-on-gui-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #click-on-gui-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #click-on-gui-modal .form-group button:hover {
            background-color: #286090;
        }
        #click-on-gui-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #click-on-gui-modal .close-btn:hover {
            color: #fff;
        }

        .console-content {
            display: flex;
            flex-direction: column;
            width: 100%;
        }
        
        #console-log {
            flex-grow: 1;
            padding: 10px;
            background-color: #222;
            color: #fff;
            border: 2px solid #333;
            border-radius: 10px;
            overflow-y: auto;
            margin-bottom: 20px;
            font-size: 18px;
            max-height: 300px;
        }
        
        .console-content .form-group {
            display: flex;
        }
        
        .console-content .form-group input[type="text"] {
            flex-grow: 1;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        
        .console-content .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        
        .console-content .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 10px;
            margin-left: 10px;
            outline: none;
        }
        
        .console-content .form-group button:hover {
            background-color: #286090;
        }

        #autoway-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #autoway-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #autoway-modal .form-group {
            margin-bottom: 20px;
        }
        #autoway-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #autoway-modal .form-group input,
        #autoway-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #autoway-modal .form-group input::-webkit-outer-spin-button,
        #autoway-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #autoway-modal .form-group input:focus,
        #autoway-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #autoway-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #autoway-modal .form-group button:hover {
            background-color: #286090;
        }
        #autoway-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #autoway-modal .close-btn:hover {
            color: #fff;
        }

        #follow-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #follow-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #follow-modal .form-group {
            margin-bottom: 20px;
        }
        #follow-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #follow-modal .form-group input,
        #follow-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #follow-modal .form-group input::-webkit-outer-spin-button,
        #follow-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #follow-modal .form-group input:focus,
        #follow-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #follow-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #follow-modal .form-group button:hover {
            background-color: #286090;
        }
        #follow-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #follow-modal .close-btn:hover {
            color: #fff;
        }

        #overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
        #autocasino-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #autocasino-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #autocasino-modal .form-group {
            margin-bottom: 20px;
        }
        #autocasino-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #autocasino-modal .form-group input,
        #autocasino-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #autocasino-modal .form-group input::-webkit-outer-spin-button,
        #autocasino-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #autocasino-modal .form-group input:focus,
        #autocasino-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #autocasino-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #autocasino-modal .form-group button:hover {
            background-color: #286090;
        }
        #autocasino-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #autocasino-modal .close-btn:hover {
            color: #fff;
        }
        #autocasino-modal .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }
        #autocasino-modal .checkbox-group input[type="checkbox"] {
            display: none;
        }
        #autocasino-modal .checkbox-group label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        #autocasino-modal .checkbox-group label span {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #333;
            border-radius: 3px;
            margin-right: 10px;
            transition: background-color 0.3s;
            position: relative;
        }
        #autocasino-modal .checkbox-group input[type="checkbox"]:checked + label span {
            background-color: #337ab7;
            border-color: #337ab7;
        }
        #autocasino-modal .checkbox-group input[type="checkbox"]:checked + label span::after {
            font-family: "Font Awesome 5 Free";
            font-weight: 900;
            color: #fff;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 14px;
        }
        
        #get-location-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 12px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            color: #fff;
        }
        #get-location-modal h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: 600;
            text-align: center;
        }
        #get-location-modal .form-group {
            margin-bottom: 20px;
        }
        #get-location-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #get-location-modal .form-group input,
        #get-location-modal .form-group button {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
            transition: border-color 0.3s;
            -moz-appearance: textfield;
        }
        #get-location-modal .form-group input::-webkit-outer-spin-button,
        #get-location-modal .form-group input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #get-location-modal .form-group input:focus,
        #get-location-modal .form-group button:hover {
            outline: none;
            border-color: #555;
        }
        #get-location-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #get-location-modal .form-group button:hover {
            background-color: #286090;
        }
        #get-location-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #get-location-modal .close-btn:hover {
            color: #fff;
        }

        .hud-content { 
            width: 500px;
            text-align: center;
        }
        
        .theme-selector label {
          display: block;
          margin-bottom: 10px;
          color: #fff;
          font-weight: bold;
          font-size: 24px; 
        }
        
        .color-options {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
          gap: 10px;
        }
        
        .color-options input[type="radio"] {
          display: none;
        }
        
        .color-options label {
          height: 40px;
          border-radius: 5px;
          cursor: pointer;
        }
        
        .color-options label[for="color-black"] {
          background-color: #111; 
        }
        
        .color-options label[for="color-blue-green"] {
          background-image: linear-gradient(to right, blue, green);
        }
        
        .color-options label[for="color-darkblue"] {
          background-image: linear-gradient(to right, darkblue, #222);
        }
        
        .color-options label[for="color-red-orange"] {
          background-image: linear-gradient(to right, red, orange);
        }
        
        .color-options label[for="color-purple-blue"] {
          background-image: linear-gradient(to right, purple, blue);
        }
        
        .color-options label[for="color-yellow-green"] {
          background-image: linear-gradient(to right, yellow, green);
        }
        
        .color-options label[for="color-orange-red"] {
          background-image: linear-gradient(to right, darkred, #500000); 
        }

        .color-options label[for="color-gold-yellow"] {
          background-image: linear-gradient(to right, gold, yellow);
        }

        .color-options label[for="color-cyan-blue"] {
          background-image: linear-gradient(to right, cyan, blue);
        }

        .color-options label[for="color-lime-green"] {
          background-image: linear-gradient(to right, lime, green);
        }

        .color-options label[for="color-pink-purple"] {
          background-image: linear-gradient(to right, pink, purple);
        }

        .color-options label[for="color-teal-blue"] {
          background-image: linear-gradient(to right, teal, blue);
        }

        .color-options label[for="color-brown-beige"] {
          background-image: linear-gradient(to right, brown, beige);
        }

        .color-options label[for="color-gray-black"] {
          background-image: linear-gradient(to right, gray, black);
        }
        
        .color-options input[type="radio"]:checked + label {
            border: 2px solid white; 
        }
        
        .gradient-blue-green .custom-element {
            background-image: linear-gradient(to right, blue, green) !important;
        }
        
        .gradient-darkblue .custom-element {
            background-image: linear-gradient(to right, darkblue, #222) !important; 
        }
        
        .gradient-red-orange .custom-element {
            background-image: linear-gradient(to right, red, orange) !important; 
        }
        
        .gradient-purple-blue .custom-element {
            background-image: linear-gradient(to right, purple, blue) !important; 
        }
        
        .gradient-yellow-green .custom-element {
            background-image: linear-gradient(to right, yellow, green) !important; 
        }
        
        .gradient-orange-red .custom-element {
            background-image: linear-gradient(to right, darkred, #500000) !important; 
        }
        
        .gradient-gold-yellow .custom-element {
            background-image: linear-gradient(to right, gold, yellow) !important;
        }
        
        .gradient-cyan-blue .custom-element {
            background-image: linear-gradient(to right, cyan, blue) !important;
        }
        
        .gradient-lime-green .custom-element {
            background-image: linear-gradient(to right, lime, green) !important;
        }
        
        .gradient-pink-purple .custom-element {
            background-image: linear-gradient(to right, pink, purple) !important;
        }
        
        .gradient-teal-blue .custom-element {
            background-image: linear-gradient(to right, teal, blue) !important;
        }
        
        .gradient-brown-beige .custom-element {
            background-image: linear-gradient(to right, brown, beige) !important;
        }
        
        .gradient-gray-black .custom-element {
            background-image: linear-gradient(to right, gray, black) !important;
        }
    </style>
</head>
<body class="dark">
<div class="container">
    <div class="sidebar">
        <h2>Entity Client</h2>
        <ul>
            <li id="home">Home</li>
            <li id="misc">Misc</li>
            <li id="console">Console</li>
            <li id="hud">HUD</li>
        </ul>
    </div>
    <div class="content">
        <div class="home-content">
            <form id="start-form">
                <div class="form-group">
                    <label for="username">Никнейм</label>
                    <input type="text" id="username" name="username" placeholder="Введите ник бота">
                </div>
                <div class="form-group">
                    <label for="ip-address">IP Адрес</label>
                    <input type="text" id="ip-address" name="ip_address" placeholder="Введите IP адрес">
                </div>
                <div class="form-group">
                    <label for="port">Порт</label>
                    <input type="text" id="port" name="port" placeholder="Введите порт">
                </div>
                <div class="form-group">
                    <button type="button" class="custom-element" id="start-button">Запуск</button>
                </div>
            </form>
            <div id="output-status"></div>
            <div id="output-log"></div>
        </div>
        <div class="misc-content">
            <ul class="function-list">
                <li class="custom-element"id="anti-afk">Anti-AFK</li>
                <li class="custom-element"id="autocasino">AutoCasino</li>
                <li class="custom-element"id="autoway">AutoWay</li>
                <li class="custom-element"id="click-on-gui" class="custom-element">Click On Gui</li>
                <li class="custom-element">Follow</li>
                <li class="custom-element"id="get-location">Get Location</li>
            </ul>
        </div>
        <div class="console-content" style="display: none;">
            <div id="console-log"></div> 
            <div class="form-group"> 
                <input type="text" id="console-input" placeholder="Введите сообщение...">
                <button class="custom-element" id="console-send-button">Отправить</button> 
            </div>
        </div>
        <div class="hud-content style="display: none;">
            <div class="theme-selector">
                <label for="theme-select">Цвет клиента:</label>
                <div class="color-options">
                    <input type="radio" id="color-black" name="theme" value="color-black" checked>
                    <label for="color-black" class="color-black"></label>
    
                    <input type="radio" id="color-blue-green" name="theme" value="gradient-blue-green">
                    <label for="color-blue-green" class="gradient-blue-green"></label>
    
                    <input type="radio" id="color-darkblue" name="theme" value="gradient-darkblue">
                    <label for="color-darkblue" class="gradient-darkblue"></label>
    
                    <input type="radio" id="color-red-orange" name="theme" value="gradient-red-orange">
                    <label for="color-red-orange" class="gradient-red-orange"></label>
    
                    <input type="radio" id="color-purple-blue" name="theme" value="gradient-purple-blue">
                    <label for="color-purple-blue" class="gradient-purple-blue"></label>
    
                    <input type="radio" id="color-yellow-green" name="theme" value="gradient-yellow-green">
                    <label for="color-yellow-green" class="gradient-yellow-green"></label>
    
                    <input type="radio" id="color-orange-red" name="theme" value="gradient-orange-red">
                    <label for="color-orange-red" class="gradient-orange-red"></label>
    
                    <input type="radio" id="color-gold-yellow" name="theme" value="gradient-gold-yellow">
                    <label for="color-gold-yellow" class="gradient-gold-yellow"></label>
    
                    <input type="radio" id="color-cyan-blue" name="theme" value="gradient-cyan-blue">
                    <label for="color-cyan-blue" class="gradient-cyan-blue"></label>
    
                    <input type="radio" id="color-lime-green" name="theme" value="gradient-lime-green">
                    <label for="color-lime-green" class="gradient-lime-green"></label>
    
                    <input type="radio" id="color-pink-purple" name="theme" value="gradient-pink-purple">
                    <label for="color-pink-purple" class="gradient-pink-purple"></label>
    
                    <input type="radio" id="color-teal-blue" name="theme" value="gradient-teal-blue">
                    <label for="color-teal-blue" class="gradient-teal-blue"></label>
    
                    <input type="radio" id="color-brown-beige" name="theme" value="gradient-brown-beige">
                    <label for="color-brown-beige" class="gradient-brown-beige"></label>
    
                    <input type="radio" id="color-gray-black" name="theme" value="gradient-gray-black">
                    <label for="color-gray-black" class="gradient-gray-black"></label>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="afk-modal">
    <span class="close-btn" onclick="closeAntiAfkModal()">×</span>
    <h2>Anti-AFK</h2>
    <div class="form-group">
        <label for="afk-cycles">Количество циклов</label>
        <input type="number" id="afk-cycles" value="10">
    </div>
    <div class="form-group">
        <button class="custom-element" id="afk-start-button">Запуск</button>
    </div>
</div>
<div id="click-on-gui-modal">
    <span class="close-btn" onclick="closeClickOnGuiModal()">×</span>
    <h2>Click On Gui</h2>
    <div class="form-group">
        <label for="bot-slot">Введите номер слота</label>
        <input type="text" id="bot-slot">
    </div>
    <div class="form-group">
        <button class="custom-element" id="click-on-gui-start-button">Нажать</button>
    </div>
</div>

<div id="overlay"></div>
<div id="autocasino-modal">
    <span class="close-btn" onclick="closeAutoCasinoModal()">×</span>
    <h2>FunTime AutoCasino</h2>
    <div class="form-group">
        <label for="autocasino-min-amount">Минимальная сумма</label>
        <input type="number" id="autocasino-min-amount" value="5000">
    </div>
    <div class="checkbox-group">
        <input type="checkbox" id="scam-version">
        <label for="scam-version">
            <span></span>
            Скам-режим
        </label>
    </div>
    <div class="form-group">
        <button id="autocasino-start-button">Запуск</button>
        <button type="button" class="custom-element" id="autocasino-stop-button" style="display: none;">Остановить</button>
    </div>
</div>

<div id="autoway-modal">
    <span class="close-btn" onclick="closeAutowayModal()">×</span>
    <h2>AutoWay</h2>
    <div class="form-group">
        <label for="autoway-x">Координата X:</label>
        <input type="number" id="autoway-x">
    </div>
    <div class="form-group">
        <label for="autoway-z">Координата Z:</label>
        <input type="number" id="autoway-z">
    </div>
    <div class="form-group">
        <button class="custom-element" id="autoway-start-button">Запуск</button>
    </div>
</div>
<div id="follow-modal">
    <span class="close-btn" onclick="closeFollowModal()">×</span>
    <h2>Follow Player</h2>
    <div class="form-group">
        <label for="follow-player-name">Ник игрока</label>
        <input type="text" id="follow-player-name">
    </div>
    <div class="form-group">
        <button type="button" class="custom-element" id="follow-start-button">Запуск</button>
        <button type="button" class="custom-element" id="follow-stop-button" style="display: none;">Остановить</button>
    </div>
</div>
<div id="get-location-modal">
    <span class="close-btn" onclick="closeGetLocationModal()">×</span>
    <h2>Get Location</h2>
    <div class="form-group">
        <label for="player-name">Ник игрока</label>
        <input type="text" id="player-name">
    </div>
    <div class="form-group">
        <button class="custom-element" id="get-location-button">Запуск</button>
    </div>
</div>
<script>
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
    });
    
    home.classList.add('selected');
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const contentDivs = document.querySelectorAll('.content > div');
    const sidebarItems = document.querySelectorAll('.sidebar li');
    let botStarted = false;

    sidebarItems.forEach(item => {
      item.addEventListener('click', function () {
        const id = this.id;

    if (id === 'console' && !botStarted) {
      Swal.fire({
        icon: 'warning',
        title: 'Bot Error',
        text: 'Сначала запустите бота!',
      });
      return;
    }
    
    if (id === 'hud' && !isPremium) {
      Swal.fire({
        title: 'Premium Function',
        text: 'Для использования этой функции требуется Premium подписка!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Купить Premium',
        cancelButtonText: 'Отмена'
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = 'https://funpay.com/users/6829696/';
        }
      });
      return;
    }

        contentDivs.forEach(div => {
          if (div.classList.contains(id + '-content')) {
            div.style.display = 'block';
          } else {
            div.style.display = 'none';
          }
        });
        sidebarItems.forEach(item => {
          item.classList.remove('selected');
        });
        this.classList.add('selected');
      });
    });

    const startButton = document.getElementById('start-button');
    let lastClickTime = 0;
    const throttleTime = 2500;

    startButton.addEventListener('click', () => {
        const now = new Date().getTime();
        if (now - lastClickTime < throttleTime) {
            Swal.fire({
                icon: 'warning',
                title: 'Too many requests',
                text: 'Пожалуйста, повторите попытку позже.',
            });
            return;
        }
            
        lastClickTime = now;
        const username = document.getElementById('username').value;
        const ipAddress = document.getElementById('ip-address').value;
        const port = document.getElementById('port').value;

    if (!username || !ipAddress || !port) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Заполните все поля.',
        });
        return;
    }
    
    if (isNaN(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт должен быть числом.',
        });
        return;
    }
    
    if (port.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт некорректный.',
        });
        return;
    }
    
    if (username.length < 3) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Никнейм некорректный.',
        });
        return;
    }
    
    if (ipAddress.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'IP-адрес некорректный.',
        });
        return;
    }

    const specialChars = /[@#^$%&*()\[\]{}|~!+\\\/=:;"'<>?,]/;
    const whitespace = /\s/;
    const cyrillic = /[а-яА-ЯёЁ]/;
    
    if (specialChars.test(username) || specialChars.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Специальные символы запрещены.',
        });
        return;
    }
    
    if (whitespace.test(username) || whitespace.test(ipAddress) || whitespace.test(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Пробелы запрещены.',
        });
        return;
    }
    
    if (cyrillic.test(username) || cyrillic.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Русские символы запрещены.',
        });
        return;
    }

        if (botStarted) {
            fetch('http://127.0.0.1:5000/stop-bot', {
                method: 'POST',
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Запуск';
                botStarted = false;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Stopped',
                    text: 'Бот был успешно остановлен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Ошибка при остановке бота.',
                });
            });
        } else {
            fetch('http://127.0.0.1:5000/start-bot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: username,
                    ip_address: ipAddress,
                    port: port,
                }),
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Остановить';
                botStarted = true;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Started',
                    text: 'Бот был успешно запущен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.',
                });
            });
        }
    });

    const afkButton = document.getElementById('anti-afk');
    const afkModal = document.getElementById('afk-modal');
    const afkStartButton = document.getElementById('afk-start-button');

    afkButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        afkModal.style.display = 'block';
    });

    afkStartButton.addEventListener('click', () => {
        const cycles = document.getElementById('afk-cycles').value;
        fetch('http://127.0.0.1:5000/start-antiafk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                cycles: cycles,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Anti-AFK Started',
                text: 'Anti-AFK был успешно запущен!',
            });
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        afkModal.style.display = 'none';
    });
    
    const autoCasinoButton = document.getElementById('autocasino');
    const autoCasinoModal = document.getElementById('autocasino-modal');
    const autoCasinoStartButton = document.getElementById('autocasino-start-button');
    const autoCasinoStopButton = document.getElementById('autocasino-stop-button');
    const scamVersionCheckbox = document.getElementById('scam-version');

    autoCasinoButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autoCasinoModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    });

    autoCasinoStartButton.addEventListener('click', () => {
        const amount = document.getElementById('autocasino-min-amount').value;
        const scamVersion = scamVersionCheckbox.checked;
        fetch('http://127.0.0.1:5000/start-autocasino', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                min_amount: amount,
                scam_version: scamVersion,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'AutoCasino Started',
                text: 'AutoCasino был успешно запущен!',
            });
            autoCasinoModal.style.display = 'none';
            autoCasinoStartButton.style.display = 'none';
            autoCasinoStopButton.style.display = 'block';
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        autoCasinoModal.style.display = 'none';
    });

    autoCasinoStopButton.addEventListener('click', () => {
        fetch('http://127.0.0.1:5000/stop-autocasino', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'AutoCasino',
                    text: 'Бот прекратил писать в чат.',
                });
                autoCasinoModal.style.display = 'none';
                autoCasinoStartButton.style.display = 'block';
                autoCasinoStopButton.style.display = 'none';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Bot Error',
                    text: 'Неизвестная ошибка.',
                });
            }
        });
    });

    const clickOnGuiButton = document.getElementById('click-on-gui');
    const clickOnGuiModal = document.getElementById('click-on-gui-modal');
    const clickOnGuiStartButton = document.getElementById('click-on-gui-start-button');
    
    clickOnGuiButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        clickOnGuiModal.style.display = 'block';
    });

    clickOnGuiStartButton.addEventListener('click', () => {
        const botSlot = parseInt(document.getElementById('bot-slot').value); 
    
        if (isNaN(botSlot)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректный номер слота.',
            });
            return; 
        }
    
        fetch('http://127.0.0.1:5000/click_on_gui', { 
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ bot_slot: botSlot }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Click On Gui',
                    text: 'Бот кликнул по слоту ' + botSlot + '.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Не удалось выполнить клик.',
                });
            }
        });
        document.getElementById('bot-slot').value = '';
    });

    const autowayButton = document.getElementById('autoway');
    const autowayModal = document.getElementById('autoway-modal');
    const autowayStartButton = document.getElementById('autoway-start-button');

    autowayButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autowayModal.style.display = 'block';
    });

    autowayStartButton.addEventListener('click', () => {
        const x = parseInt(document.getElementById('autoway-x').value);
        const z = parseInt(document.getElementById('autoway-z').value);

        if (isNaN(x) || isNaN(z)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректные координаты X и Z.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/start-autoway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ x: x, z: z }),
        })
            .then(response => {
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'AutoWay started',
                        text: 'Бот начал движение к указанным координатам.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Bot Error',
                        text: 'Не удалось запустить AutoWay.',
                    });
                }
            });
        autowayModal.style.display = 'none';
    });
    
    const consoleLog = document.getElementById('console-log');
    const consoleInput = document.getElementById('console-input');
    const consoleSendButton = document.getElementById('console-send-button');
    
    function logToConsole(message) {
        const messageElement = document.createElement('p');
        messageElement.textContent = message;
        consoleLog.appendChild(messageElement);
        consoleLog.scrollTop = consoleLog.scrollHeight;
    }
    
    function sendMessage() {
        const message = consoleInput.value.trim();
        if (message !== "") {
            fetch('http://127.0.0.1:5000/console_message', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({message: message})
            });
            consoleInput.value = "";
        }
    }
    
    consoleSendButton.addEventListener('click', sendMessage);
    
    consoleInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            sendMessage();
        }
    });

    function checkForMessages() {
        if (botStarted) {
            fetch('http://127.0.0.1:5000/get_messages')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.text !== '') {
                        logToConsole(data.text);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                });
        }
    }
    
    const followButton = document.querySelector('.function-list li:nth-child(5)');
    const followModal = document.getElementById('follow-modal');
    const followStartButton = document.getElementById('follow-start-button');
    const followStopButton = document.getElementById('follow-stop-button');
    let isFollowing = false; 
    
    followButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        followModal.style.display = 'block';
    });
    
    followStartButton.addEventListener('click', () => {
        const playerName = document.getElementById('follow-player-name').value;
    
        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите ник игрока.',
            });
            return;
        }
    
        fetch('http://127.0.0.1:5000/start-follow', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Started',
                    text: 'Бот начал движение за игроком ' + playerName + '.',
                });
                isFollowing = true;
                followStartButton.style.display = 'none';
                followStopButton.style.display = 'block';
                autowayModal.style.display = 'none';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to start following.',
                });
            }
        });
    });
    
    followStopButton.addEventListener('click', () => {
        fetch('http://127.0.0.1:5000/stop-follow', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Stopped',
                    text: 'Бот прекратил движение.',
                });
                isFollowing = false;
                autowayModal.style.display = 'none';
                followStartButton.style.display = 'block'; 
                followStopButton.style.display = 'none'; 
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Bot Error',
                    text: 'Неизвестная ошибка.',
                });
            }
        });
    });
    
    const getLocationButton = document.querySelector('.function-list li:nth-child(6)'); 
    const getLocationModal = document.getElementById('get-location-modal');
    const getPlayerLocationButton = document.getElementById('get-location-button');
    
    getLocationButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        getLocationModal.style.display = 'block';
    });

    getPlayerLocationButton.addEventListener('click', () => {
        const playerName = document.getElementById('player-name').value;

        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите имя игрока.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/get-coordinates', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
            .then(response => response.json()) 
            .then(data => { 
                if (data.success) { 
                   Swal.fire({
                        icon: 'success',
                        title: 'Get Location',
                        text: 'Информация выведена в чат.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Не удалось получить координаты.',
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.', 
                });
            });

        getLocationModal.style.display = 'none'; 
    });

    const colorOptions = document.querySelectorAll('.color-options input[type="radio"]');
    const body = document.body; 
    const sidebar = document.querySelector('.sidebar');
    const formGroups = document.querySelectorAll('.form-group');
    const consoleContent = document.querySelector('.console-content');
    const content = document.querySelector('.content');
    
    colorOptions.forEach(option => {
        option.addEventListener('change', function() {
            const selectedGradient = this.value;
    
            body.className = '';
            sidebar.className = 'sidebar';
            content.className = 'content';

            body.classList.add(selectedGradient);
            sidebar.classList.add(selectedGradient);
            content.classList.add(selectedGradient);
    
            formGroups.forEach(formGroup => {
                formGroup.className = 'form-group';
                formGroup.classList.add(selectedGradient);
            });
    
            consoleContent.className = 'console-content';
            consoleContent.classList.add(selectedGradient);
        });
    });
    
    let isPremium;

    fetch('http://127.0.0.1:5000/check_premium')
    .then(response => response.json())
    .then(data => {
        isPremium = data.isPremium; 
    })
    .catch(error => console.error('Fetch Error:', error));


    setInterval(checkForMessages, 600);
    
    function closeAutoCasinoModal() {
        autoCasinoModal.style.display = 'none';
    }
    
    function closeGetLocationModal() {
        getLocationModal.style.display = 'none';
    }

    function closeFollowModal() {
        followModal.style.display = 'none';
    }

    function closeAutowayModal() {
        autowayModal.style.display = 'none';
    }

    function closeClickOnGuiModal() {
        clickOnGuiModal.style.display = 'none';
    }

    function closeAntiAfkModal() {
        afkModal.style.display = 'none';
    }

</script>
</body>
</html>
"""#line:1785
app =Flask (__name__ )#line:1787
CORS (app )#line:1788
bot_started =False #line:1790
@app .route ('/start-bot',methods =['POST'])#line:1792
def start_bot_route ():#line:1793
    global bot_started #line:1794
    if bot_started :#line:1795
        return jsonify ({'success':False ,'message':'Бот уже запущен.'})#line:1796
    OO0OO00O00OO00OO0 =request .json #line:1797
    OO00OOOO00OO0000O =OO0OO00O00OO00OO0 ['username']#line:1798
    OOOO00O0OOO000OOO =OO0OO00O00OO00OO0 ['ip_address']#line:1799
    O00OO000OO0O00000 =OO0OO00O00OO00OO0 ['port']#line:1800
    OOOO000OOOOO0OO00 =Thread (target =start_bot ,args =(OO00OOOO00OO0000O ,OOOO00O0OOO000OOO ,O00OO000OO0O00000 ))#line:1801
    OOOO000OOOOO0OO00 .start ()#line:1802
    bot_started =True #line:1803
    return jsonify ({'success':True })#line:1804
@app .route ('/stop-bot',methods =['POST'])#line:1806
def stop_bot_route ():#line:1807
    global bot_started ,bot #line:1808
    if not bot_started :#line:1809
        return jsonify ({'success':False ,'message':'Бот не запущен.'})#line:1810
    O0000O000000O0O0O =Thread (target =stop_bot )#line:1811
    O0000O000000O0O0O .start ()#line:1812
    bot_started =False #line:1813
    return jsonify ({'success':True })#line:1814
@app .route ('/start-antiafk',methods =['POST'])#line:1816
def start_antiafk_route ():#line:1817
    OO0O00OOO000OOOOO =request .json #line:1818
    O0O0O00OOO0O0OOO0 =int (OO0O00OOO000OOOOO ['cycles'])#line:1819
    OOOOO000000O000OO =Thread (target =start_AntiAFK ,args =(O0O0O00OOO0O0OOO0 ,))#line:1820
    OOOOO000000O000OO .start ()#line:1821
    return jsonify ({'success':True })#line:1822
@app .route ('/click_on_gui',methods =['POST'])#line:1824
def click_on_gui_route ():#line:1825
    OO00OOOO0OO00OOOO =request .json #line:1826
    O00OO00O0O0O00OOO =int (OO00OOOO0OO00OOOO .get ('bot_slot',0 ))#line:1827
    OOOO0O00OOOOO000O =Thread (target =click_on_gui ,args =(O00OO00O0O0O00OOO ,))#line:1828
    OOOO0O00OOOOO000O .start ()#line:1829
    return jsonify ({'success':True })#line:1830
@app .route ('/start-autoway',methods =['POST'])#line:1832
def start_autoway_route ():#line:1833
    O000OOO00O00O00O0 =request .json #line:1834
    OO0O0OO00OOOOOOOO =int (O000OOO00O00O00O0 ['x'])#line:1835
    O000OOO000OOO0OOO =int (O000OOO00O00O00O0 ['z'])#line:1836
    O0O0O0OO0O000OOO0 =Thread (target =autoway ,args =(OO0O0OO00OOOOOOOO ,O000OOO000OOO0OOO ,))#line:1837
    O0O0O0OO0O000OOO0 .start ()#line:1838
    return jsonify ({'success':True })#line:1839
@app .route ('/check_premium',methods =['GET'])#line:1841
def check_premium_route ():#line:1842
    O0OOOOO00OOOOO0O0 =get_hwid ()#line:1843
    if O0OOOOO00OOOOO0O0 :#line:1844
        OO00OOO00OOOO00O0 =hash_hwid (O0OOOOO00OOOOO0O0 )#line:1845
        OO000000O000O0O00 =check_premium (OO00OOO00OOOO00O0 )#line:1846
        return jsonify ({'isPremium':OO000000O000O0O00 })#line:1847
    else :#line:1848
        return jsonify ({'isPremium':False })#line:1849
@app .route ('/start-follow',methods =['POST'])#line:1851
def start_follow_route ():#line:1852
    global isFollowing #line:1853
    if isFollowing :#line:1854
        return jsonify ({'success':False ,'message':'Bot is already following.'})#line:1855
    OO000O0O0OO0O0OOO =request .json #line:1857
    OO00O0OO0OO000O00 =OO000O0O0OO0O0OOO ['player']#line:1858
    O0O0000O0000O000O =Thread (target =follow ,args =(OO00O0OO0OO000O00 ,))#line:1859
    O0O0000O0000O000O .start ()#line:1860
    isFollowing =True #line:1861
    return jsonify ({'success':True })#line:1862
@app .route ('/stop-follow',methods =['POST'])#line:1864
def stop_follow_route ():#line:1865
    global isFollowing #line:1866
    if not isFollowing :#line:1867
        return jsonify ({'success':False ,'message':'Bot is not currently following.'})#line:1868
    isFollowing =False #line:1870
    bot_unfollow ()#line:1871
    return jsonify ({'success':True })#line:1873
@app .route ('/get-coordinates',methods =['POST'])#line:1875
def get_coordinates_route ():#line:1876
    OO0OO00O0O00OOO0O =request .json #line:1877
    OOO00O00O00OOO00O =OO0OO00O0O00OOO0O ['player']#line:1878
    O0O0000O00OOOOO0O =Thread (target =get_coordinates ,args =(OOO00O00O00OOO00O ,))#line:1879
    O0O0000O00OOOOO0O .start ()#line:1880
    return jsonify ({'success':True })#line:1881
@app .route ('/start-autocasino',methods =['POST'])#line:1883
def start_autocasino_route ():#line:1884
    global min_amount ,scam_version #line:1885
    OOOO00O0OO00OOOO0 =request .json #line:1886
    min_amount =int (OOOO00O0OO00OOOO0 .get ('min_amount'))#line:1887
    scam_version =OOOO00O0OO00OOOO0 .get ('scam_version')#line:1888
    print (scam_version )#line:1889
    O00OO0O0O0O0O0OOO =Thread (target =autocasino ,args =(min_amount ,scam_version ))#line:1890
    O00OO0O0O0O0O0OOO .start ()#line:1891
    return jsonify ({'success':True })#line:1892
@app .route ('/stop-autocasino',methods =['POST'])#line:1894
def stop_autocasino_route ():#line:1895
    global autocasino_status #line:1896
    autocasino_status =True #line:1897
    return jsonify ({'success':True })#line:1898
@app .route ('/console_message',methods =['POST'])#line:1900
def console_message_route ():#line:1901
    O00OO000OO00000O0 =request .get_json ()#line:1902
    if O00OO000OO00000O0 and 'message'in O00OO000OO00000O0 :#line:1903
        O00OO0O000OOO0O0O =O00OO000OO00000O0 ['message']#line:1904
        OO0000O000O0O000O =Thread (target =handle_console_message ,args =(O00OO0O000OOO0O0O ,))#line:1905
        OO0000O000O0O000O .start ()#line:1906
    return jsonify ({'success':True })#line:1907
@app .route ('/get_messages')#line:1909
def get_messages ():#line:1910
    try :#line:1911
        O00O0O00000O00O00 =message_queue .get (timeout =0.1 )#line:1912
        return jsonify ({'text':O00O0O00000O00O00 })#line:1913
    except Empty :#line:1914
        return jsonify ({'text':''})#line:1915
def handle_console_message (O00OO000000O000OO ):#line:1917
    global bot #line:1918
    if bot :#line:1919
        bot .chat (O00OO000000O000OO )#line:1920
def get_bot_message ():#line:1922
    global last_bot_message #line:1923
    return last_bot_message #line:1924
def start_AntiAFK (OO0O0O00OO0OOOOOO ):#line:1926
    run (bot_antiafk (OO0O0O00OO0OOOOOO ))#line:1927
def autoway (O0OOOOOO0O00OOO00 ,OO0OOOO0OOOO0OOO0 ):#line:1929
    run (bot_autoway (O0OOOOOO0O00OOO00 ,OO0OOOO0OOOO0OOO0 ))#line:1930
def follow (O0OO00OO00OO00OOO ):#line:1932
    run (bot_follow (O0OO00OO00OO00OOO ))#line:1933
def click_on_gui (OO00O0OO0000O00OO ):#line:1935
    run (bot_click_on_gui (OO00O0OO0000O00OO ))#line:1936
def get_coordinates (O0OO0OOO0000O00OO ):#line:1938
    run (bot_get_coordinates (O0OO0OOO0000O00OO ))#line:1939
def autocasino (O00O0OO000OO00OO0 ,O00O00O0OO0O0OOOO ):#line:1941
    run (bot_autocasino (O00O0OO000OO00OO0 ,O00O00O0OO0O0OOOO ))#line:1942
def start_bot (O0000O00OO0OOO00O ,OO00OOOOOO0OOO00O ,OO00O00OO0O00000O ):#line:1944
    run (start_bot_async (O0000O00OO0OOO00O ,OO00OOOOOO0OOO00O ,OO00O00OO0O00000O ))#line:1945
def stop_bot ():#line:1947
    run (bot_disconnect ())#line:1948
def bot_open_auction ():#line:1950
    pass #line:1951
async def start_bot_async (OO00OOO000OO0O0OO ,O0OO000O00O0OO0OO ,OOO0O0OOOO0O00OO0 ):#line:1953
    global bot #line:1954
    bot =mineflayer .createBot ({'username':OO00OOO000OO0O0OO ,'host':O0OO000O00O0OO0OO ,'port':int (OOO0O0OOOO0O00OO0 ),'hideErrors':True })#line:1960
    bot .loadPlugin (pathfinder .pathfinder )#line:1961
    @On (bot ,'message')#line:1963
    def O000OO0OO0000O00O (O00OOOOO0O0000OO0 ,OOOOOO000O0O00OO0 ,*O0OO0OOO00OOO0000 ):#line:1964
        if OOOOOO000O0O00OO0 .extra is None :#line:1965
            return False #line:1966
        OO00O00O0OO0000O0 =''.join (OOO00000OO0000O00 .text for OOO00000OO0000O00 in OOOOOO000O0O00OO0 .extra )#line:1968
        print (f"{OO00O00O0OO0000O0}")#line:1969
        message_queue .put (OO00O00O0OO0000O0 )#line:1970
async def bot_autocasino (OO0000O00O00O0O0O ,OO0OOO0O000OO0OOO ):#line:1972
    def OOOOOO000OO00O0OO ():#line:1973
        if not autocasino_status :#line:1974
            time .sleep (0.5 )#line:1975
            bot .chat (f"! Я новый казино бот! Я даю возможность сыграть вам 1 на 1, для этого просто отправьте мне от ${OO0000O00O00O0O0O}.")#line:1976
            time .sleep (1.5 )#line:1977
    def O0O0OOO000O0O00OO (O0OOO0OO000OOO0O0 ):#line:1979
        time .sleep (1 )#line:1980
        bot .chat (f"/msg {O0OOO0OO000OOO0O0} Извините, но минимальная ставка - ${OO0000O00O00O0O0O}. Ставка не возвращается")#line:1981
        time .sleep (1.5 )#line:1982
    def OO0OO0000OOOOO000 (OOO0O0O0O0OOO000O ,OO0OO0OOOOO00000O ):#line:1984
        if not OO0OOO0O000OO0OOO :#line:1985
            bot .chat (f"/pay {OOO0O0O0O0OOO000O} {OO0OO0OOOOO00000O}")#line:1986
            time .sleep (1 )#line:1987
            bot .chat (f"/pay {OOO0O0O0O0OOO000O} {OO0OO0OOOOO00000O}")#line:1988
            time .sleep (1 )#line:1989
            bot .chat (f"/msg {OOO0O0O0O0OOO000O} Вы уже участвуете в игре. Ваша ставка ${OO0OO0OOOOO00000O} возвращена.")#line:1990
    def OOO000OOOO0OO0000 (O0O0000OOOO00000O ,OOOO00OO0OO000O00 ,O00O000OO000OOO00 ):#line:1992
        bot .chat (f"/msg {OOOO00OO0OO000O00} Ты проиграл игроку {O0O0000OOOO00000O}. Его ставка: {O00O000OO000OOO00}")#line:1993
    def OOOO00O000O00O00O (OOOO00OOO00O0O0OO ,OOOO0000000OO0O0O ,O0O0OOO0O0OOO0O0O ,OOO0O0O00000000O0 ):#line:1995
        OOO00O0OOO0OOOO0O =O0O0OOO0O0OOO0O0O +OOO0O0O00000000O0 #line:1996
        O000OO0O00OO0OOO0 =int (OOO00O0OOO0OOOO0O *0.5 )#line:1997
        O0O0O0OOO0OO00000 =OOO00O0OOO0OOOO0O -O000OO0O00OO0OOO0 #line:1998
        OO0000OOO00OOO000 =O0O0OOO0O0OOO0O0O +int (O0O0O0OOO0OO00000 *0.50 )if OOOO00OOO00O0O0OO ==first_player else OOO0O0O00000000O0 +int (O0O0O0OOO0OO00000 *0.50 )#line:1999
        bot .chat (f"/pay {OOOO00OOO00O0O0OO} {OO0000OOO00OOO000}")#line:2001
        time .sleep (2 )#line:2002
        bot .chat (f"/pay {OOOO00OOO00O0O0OO} {OO0000OOO00OOO000}")#line:2003
        time .sleep (1.25 )#line:2004
        bot .chat (f"/msg {OOOO00OOO00O0O0OO} Ты выиграл игрока {OOOO0000000OO0O0O}. Твой выигрыш: {OO0000OOO00OOO000}")#line:2005
        time .sleep (1.25 )#line:2006
        bot .chat (f"/msg {OOOO0000000OO0O0O} Ты проиграл игроку {OOOO00OOO00O0O0OO}. Его ставка: {O0O0OOO0O0OOO0O0O if OOOO00OOO00O0O0OO == first_player else OOO0O0O00000000O0}")#line:2007
        time .sleep (0.5 )#line:2008
        bot .chat ("/balance")#line:2009
        time .sleep (0.5 )#line:2010
    def OOO000O00OO00O00O ():#line:2012
        global first_player ,second_player ,first_bet ,second_bet ,waiting_for_second_player ,timeout_timer #line:2013
        first_player =None #line:2014
        second_player =None #line:2015
        first_bet =0 #line:2016
        second_bet =0 #line:2017
        waiting_for_second_player =None #line:2018
        if timeout_timer is not None :#line:2019
            timeout_timer .cancel ()#line:2020
            timeout_timer =None #line:2021
    def OO0O0000O00000OO0 ():#line:2023
        global first_player ,first_bet #line:2024
        if first_player and second_player is None :#line:2025
            if not OO0OOO0O000OO0OOO :#line:2026
                bot .chat (f'/msg {first_player} Время ожидания второго игрока истекло. Ваша ставка ${first_bet} возвращена.')#line:2027
                OO0OO0000OOOOO000 (first_player ,first_bet )#line:2028
            OOO000O00OO00O00O ()#line:2029
            time .sleep (1.5 )#line:2030
    def O0O00000OO000OOO0 ():#line:2032
        if not autocasino_status :#line:2033
            while not autocasino_status :#line:2034
                OOOOOO000OO00O0OO ()#line:2035
                O0O00OO000O00O00O =randint (15 ,41 )#line:2036
                time .sleep (O0O00OO000O00O00O )#line:2037
    @On (bot ,'message')#line:2039
    def OO000OOO0OO00OOOO (_O00O00O0O0O0000O0 ,O0OO00OOOOO0000O0 ,*_OO0OOOO0O00O0O000 ):#line:2040
        global first_player ,second_player ,first_bet ,second_bet ,min_amount ,waiting_for_second_player ,timeout_timer #line:2041
        if autocasino_status :#line:2043
            return #line:2044
        if O0OO00OOOOO0000O0 .extra is None :#line:2046
            return False #line:2047
        OOO0OO0O0O0OOOOOO =''.join ([OOOOO0O0OOO00OO0O .text for OOOOO0O0OOO00OO0O in O0OO00OOOOO0000O0 .extra ])#line:2049
        if '[$] Ваш баланс'in OOO0OO0O0O0OOOOOO :#line:2051
            O00O000OOO00O00O0 =OOO0OO0O0O0OOOOOO .split (":")#line:2052
            if len (O00O000OOO00O00O0 )>1 :#line:2053
                OOO000O0O0O00O0O0 =O00O000OOO00O00O0 [1 ].strip ()#line:2054
        if 'получено от игрока'in OOO0OO0O0O0OOOOOO :#line:2056
            O000O00OOOO00000O =r'\$([\д,]+).*получено от игрока (\w+)'#line:2057
            OOOO0000O00OO00OO =search (O000O00OOOO00000O ,OOO0OO0O0O0OOOOOO )#line:2058
            if OOOO0000O00OO00OO :#line:2060
                O00O0O00O0O0OO00O =int (OOOO0000O00OO00OO .group (1 ).replace (',',''))#line:2061
                O00O0OO0O0000OOOO =OOOO0000O00OO00OO .group (2 )#line:2062
                if O00O0O00O0O0OO00O !=1 and O00O0O00O0O0OO00O <min_amount :#line:2064
                    O0O0OOO000O0O00OO (O00O0OO0O0000OOOO )#line:2065
                    return #line:2066
                if O00O0OO0O0000OOOO ==first_player or O00O0OO0O0000OOOO ==second_player :#line:2068
                    if not OO0OOO0O000OO0OOO :#line:2069
                        OO0OO0000OOOOO000 (O00O0OO0O0000OOOO ,O00O0O00O0O0OO00O )#line:2070
                    return #line:2071
                if first_player is None or OO0OOO0O000OO0OOO :#line:2073
                    first_player =O00O0OO0O0000OOOO #line:2074
                    first_bet =O00O0O00O0O0OO00O #line:2075
                    waiting_for_second_player =True #line:2076
                    if timeout_timer is not None :#line:2077
                        timeout_timer .cancel ()#line:2078
                    timeout_timer =Timer (90 ,OO0O0000O00000OO0 )#line:2079
                    timeout_timer .start ()#line:2080
                    bot .chat (f"/msg {O00O0OO0O0000OOOO} Ты зарегистрирован как первый игрок. Ставка: ${first_bet}")#line:2081
                elif second_player is None and not OO0OOO0O000OO0OOO :#line:2082
                    OOOOO0OO0O0OO0OOO =max (min_amount ,int (first_bet *0.8 ))#line:2083
                    OOO00000O0O0O000O =int (first_bet *1.2 )#line:2084
                    if OOOOO0OO0O0OO0OOO <=O00O0O00O0O0OO00O <=OOO00000O0O0O000O :#line:2085
                        second_player =O00O0OO0O0000OOOO #line:2086
                        second_bet =O00O0O00O0O0OO00O #line:2087
                        waiting_for_second_player =False #line:2088
                        if timeout_timer is not None :#line:2089
                            timeout_timer .cancel ()#line:2090
                            timeout_timer =None #line:2091
                    else :#line:2092
                        bot .chat (f"/msg {O00O0OO0O0000OOOO} Ставка некорректная. Подходящая ставка: ${OOOOO0OO0O0OO0OOO}-${OOO00000O0O0O000O}. Ваша ставка ${O00O0O00O0O0OO00O} возвращена.")#line:2093
                        if not OO0OOO0O000OO0OOO :#line:2094
                            OO0OO0000OOOOO000 (O00O0OO0O0000OOOO ,O00O0O00O0O0OO00O )#line:2095
                        sleep (1.5 )#line:2096
                if first_player and second_player :#line:2098
                    OOO0O00O0OOOOO00O =choice ([first_player ,second_player ])#line:2099
                    O0OOO0O0OOOO00OO0 =first_player if OOO0O00O0OOOOO00O ==second_player else second_player #line:2100
                    OOOO00O000O00O00O (OOO0O00O0OOOOO00O ,O0OOO0O0OOOO00OO0 ,first_bet ,second_bet )#line:2102
                    OOO000OOOO0OO0000 (OOO0O00O0OOOOO00O ,O0OOO0O0OOOO00OO0 ,first_bet if OOO0O00O0OOOOO00O ==first_player else second_bet )#line:2103
                    OOO000O00OO00O00O ()#line:2104
    O00OO000O0000OOO0 =Thread (target =O0O00000OO000OOO0 )#line:2106
    O00OO000O0000OOO0 .daemon =True #line:2107
    O00OO000O0000OOO0 .start ()#line:2108
async def bot_antiafk (O0OO0000OOO000O0O ):#line:2110
    for _OO0OOO0O0OO0000O0 in range (O0OO0000OOO000O0O ):#line:2111
        bot .setControlState ('right',True )#line:2112
        time .sleep (0.5 )#line:2113
        bot .setControlState ('right',False )#line:2114
        time .sleep (0.5 )#line:2115
        bot .setControlState ('left',True )#line:2116
        time .sleep (0.5 )#line:2117
        bot .setControlState ('left',False )#line:2118
        time .sleep (0.5 )#line:2119
def is_discord_running ():#line:2121
    for OOO0OO0O0O00O00O0 in process_iter (['name']):#line:2122
        if OOO0OO0O0O00O00O0 .info ['name']=='Discord.exe':#line:2123
            return True #line:2124
    return False #line:2125
def check_discord_process ():#line:2127
    O000O00OO0O00000O =False #line:2128
    while True :#line:2129
        if is_discord_running ():#line:2130
            if not O000O00OO0O00000O :#line:2131
                toggle_discord_rpc (True )#line:2132
                O000O00OO0O00000O =True #line:2133
        else :#line:2134
            if O000O00OO0O00000O :#line:2135
                toggle_discord_rpc (False )#line:2136
                O000O00OO0O00000O =False #line:2137
        time .sleep (10 )#line:2138
async def bot_get_coordinates (O00OOO00000O0O0O0 ):#line:2140
    if O00OOO00000O0O0O0 in bot .players :#line:2141
        O0OOOO000OO000O0O =bot .players [O00OOO00000O0O0O0 ].entity #line:2142
        if O0OOOO000OO000O0O is None or not hasattr (O0OOOO000OO000O0O ,'position'):#line:2143
            bot .chat (f"Игрок с именем {O00OOO00000O0O0O0} не найден, либо не находится в радиусе 4 чанков.")#line:2144
            return jsonify ({'success':False })#line:2145
        OO00O00O0O000OO0O =O0OOOO000OO000O0O .position #line:2147
        OOOOOOO00000O0OOO ="{:.1f}".format (OO00O00O0O000OO0O .x )#line:2148
        OOOOO00O00OO0O000 ="{:.1f}".format (OO00O00O0O000OO0O .y )#line:2149
        O0OO0O00O00OOOOO0 ="{:.1f}".format (OO00O00O0O000OO0O .z )#line:2150
        bot .chat (f"Локация игрока {O00OOO00000O0O0O0}: x={OOOOOOO00000O0OOO}, y={OOOOO00O00OO0O000}, z={O0OO0O00O00OOOOO0}")#line:2152
        return jsonify ({'success':True })#line:2153
    else :#line:2154
        return jsonify ({'success':False })#line:2155
async def bot_autoway (OOO0OOOOO0O0000OO ,OO0OOO00O000O00O0 ,*OO000O0OO0O0O0OO0 ):#line:2157
    OOOO000000O0O0O00 =require ("minecraft-data")(bot .version )#line:2158
    OOOOOOO000OO0O00O =pathfinder .Movements (bot ,OOOO000000O0O0O00 )#line:2159
    OOOOOOO000OO0O00O .allowFreeMotion =True #line:2161
    OOOOOOO000OO0O00O .allowSprinting =False #line:2162
    bot .pathfinder .setMovements (OOOOOOO000OO0O00O )#line:2164
    bot .look (uniform (-180 ,180 ),uniform (-90 ,90 ))#line:2166
    bot .pathfinder .setGoal (pathfinder .goals .GoalNear (OOO0OOOOO0O0000OO ,bot .entity .position .y ,OO0OOO00O000O00O0 ,1 ))#line:2167
    bot .setControlState ('jump',True )#line:2168
    bot .look (uniform (-180 ,180 ),uniform (-90 ,90 ))#line:2169
async def bot_follow (O0O0OO0OOO0OOOO00 ):#line:2171
    global isFollowing #line:2172
    if isFollowing :#line:2173
        OOOOOOOO00OOO000O =require ("minecraft-data")(bot .version )#line:2174
        OOO00O00O0O00OOO0 =pathfinder .Movements (bot ,OOOOOOOO00OOO000O )#line:2175
        OOO00O00O0O00OOO0 .allowFreeMotion =True #line:2177
        OOO00O00O0O00OOO0 .allowSprinting =False #line:2178
        OOOO0O000OO0O0OOO =bot .players [O0O0OO0OOO0OOOO00 ].entity #line:2180
        bot .pathfinder .setMovements (OOO00O00O0O00OOO0 )#line:2181
        O0OO000OOOO0000O0 =GoalFollow (OOOO0O000OO0O0OOO ,1 )#line:2182
        bot .pathfinder .setGoal (O0OO000OOOO0000O0 ,True )#line:2183
        await sleep (0.1 )#line:2184
    if not isFollowing :#line:2185
        bot .pathfinder .setGoal (None )#line:2186
async def bot_spammer (OO0OO00O0OO00O00O ,O0000OOOOOO00O0O0 ,OO0O0O00OOOOO0OO0 ,*OOO00O00OOO0OOO0O ):#line:2188
    time .sleep (OO0O0O00OOOOO0OO0 )#line:2189
    OO0OOO0OOOO00OOOO =bot .players #line:2190
    for OO00O00OO0O0O00O0 in OO0OOO0OOOO00OOOO :#line:2191
        O00O00OO0O00000OO =OO0OOO0OOOO00OOOO [OO00O00OO0O0O00O0 ]["username"]#line:2192
        time .sleep (3.5 )#line:2193
        bot .chat (f'{OO0OO00O0OO00O00O} {O00O00OO0O00000OO} {O0000OOOOOO00O0O0}')#line:2194
def use_on_entity (O0O0OOO00O00OO000 ):#line:2196
    global target_entity #line:2197
    try :#line:2198
        O0OO000000O000O0O =require ('minecraft-data')(bot .version )#line:2199
        O00O0O00OOO0OO000 =pathfinder .Movements (bot ,O0OO000000O000O0O )#line:2200
        bot .pathfinder .setMovements (O00O0O00OOO0OO000 )#line:2201
        bot .pathfinder .setGoal (pathfinder .goals .GoalNear (O0O0OOO00O00OO000 .position .x ,O0O0OOO00O00OO000 .position .y ,O0O0OOO00O00OO000 .position .z ,1 ))#line:2202
        target_entity =O0O0OOO00O00OO000 #line:2203
    except Exception as O00O0OOOO00O00O00 :#line:2204
        print (f"Error handling entity: {O00O0OOOO00O00O00}")#line:2205
def bot_unfollow ():#line:2207
    OOO0000OOO0O00OOO =require ("minecraft-data")(bot .version )#line:2208
    O000O0O0OOOOO0OO0 =pathfinder .Movements (bot ,OOO0000OOO0O00OOO )#line:2209
    bot .pathfinder .setMovements (O000O0O0OOOOO0OO0 )#line:2211
    bot .pathfinder .setGoal (None )#line:2212
async def bot_click_on_gui (OO0O0OOO0OOOOOO0O ):#line:2214
    try :#line:2215
        time .sleep (1 )#line:2216
        bot .clickWindow (OO0O0OOO0OOOOOO0O ,0 ,0 )#line:2217
    except errors .JavaScriptError :#line:2218
        pass #line:2219
async def bot_disconnect ():#line:2221
    bot .quit ()#line:2222
def toggle_discord_rpc (O00O0O0OO00O00O00 ):#line:2224
    OOOOO00O00OO000O0 ='1195092611615178802'#line:2225
    O00O0O000OO00O0OO =Presence (OOOOO00O00OO000O0 )#line:2226
    if O00O0O0OO00O00O00 :#line:2227
        if is_discord_running ():#line:2228
            try :#line:2229
                O00O0O000OO00O0OO .connect ()#line:2230
                O00O0O000OO00O0OO .update (details ="Release",large_image ="icon2",start =int (time .time ()))#line:2235
            except Exception :#line:2236
                pass #line:2237
        else :#line:2238
            pass #line:2239
    else :#line:2240
        try :#line:2241
            O00O0O000OO00O0OO .close ()#line:2242
        except Exception :#line:2243
            pass #line:2244
def get_wmi_data (OO00000OOOOOO000O ):#line:2246
    try :#line:2247
        OOO00OO0O000O00OO =check_output (OO00000OOOOOO000O ,shell =True ).decode ().split ('\n')[1 ].strip ()#line:2248
        return OOO00OO0O000O00OO #line:2249
    except Exception as O00OOO000OOOO0O00 :#line:2250
        print (f"Ошибка при выполнении команды {OO00000OOOOOO000O}: {O00OOO000OOOO0O00}")#line:2251
        return None #line:2252
def get_hwid ():#line:2254
    OO00OO0OOO0OO0OOO =get_wmi_data ('wmic baseboard get serialnumber')#line:2255
    OO00OOOO00000000O =get_wmi_data ('wmic cpu get processorid')#line:2256
    O0O0OOO0OOOO0OOO0 =get_wmi_data ('wmic diskdrive get serialnumber')#line:2257
    O00OO0OO00O0O000O =get_wmi_data ('wmic bios get serialnumber')#line:2258
    O0OO00OO0OO00000O =get_wmi_data ('wmic os get serialnumber')#line:2259
    O0O00O00000OO00OO =f"{OO00OO0OOO0OO0OOO}{OO00OOOO00000000O}{O0O0OOO0OOOO0OOO0}{O00OO0OO00O0O000O}{O0OO00OO0OO00000O}"#line:2261
    return O0O00O00000OO00OO #line:2262
def hash_hwid (O00O00O00O0OO0O00 ):#line:2264
    O0OOO00O0O0O0OO00 =sha512 (O00O00O00O0OO0O00 .encode ()).hexdigest ()#line:2265
    return O0OOO00O0O0O0OO00 #line:2266
def get_premium_hwids ():#line:2268
    OOO0OOO0OOOOOOOOO ="https://raw.githubusercontent.com/rimero321/entityclient/main/hwids.txt"#line:2269
    O000O000OO0OOO0OO =get (OOO0OOO0OOOOOOOOO )#line:2270
    O00OO0OO0O00O00O0 =O000O000OO0OOO0OO .text .splitlines ()#line:2271
    return O00OO0OO0O00O00O0 #line:2272
def check_premium (O0000OO0OOOOO0OOO ):#line:2274
    if not O0000OO0OOOOO0OOO :#line:2275
        return False #line:2276
    O0O00OOOOOO0O0000 =get_premium_hwids ()#line:2277
    return O0000OO0OOOOO0OOO in O0O00OOOOOO0O0000 #line:2278
def client_status ():#line:2280
    O000O0O0O00O0O00O =get ('https://raw.githubusercontent.com/rimero321/entityclient/main/versions.txt')#line:2281
    if O000O0O0O00O0O00O .status_code ==200 :#line:2282
        O00OOOOOOOOOO000O =O000O0O0O00O0O00O .text .split ('\n')#line:2283
        O00OO0O00O0OO0OO0 =O00OOOOOOOOOO000O [0 ].split (': ')[1 ].strip ()#line:2284
        return O00OO0O00O0OO0OO0 #line:2285
status =str (client_status ())#line:2287
class MainWindow (QMainWindow ):#line:2289
    def __init__ (OO0O000OOOOO00000 ):#line:2290
        super ().__init__ ()#line:2291
        OO0O000OOOOO00000 .setWindowTitle (' ')#line:2292
        OO0O000OOOOO00000 .setGeometry (100 ,100 ,1050 ,700 )#line:2293
        OO0O000OOOOO00000 .setFixedSize (1050 ,700 )#line:2294
        OO0O000OOOOO00000 .browser =QWebEngineView ()#line:2295
        OO0O000OOOOO00000 .browser .setHtml (html_content )#line:2296
        OO0O000OOOOO00000 .setCentralWidget (OO0O000OOOOO00000 .browser )#line:2297
        OO0O000OOOOO00000 .channel =QWebChannel ()#line:2298
        OO0O000OOOOO00000 .browser .page ().setWebChannel (OO0O000OOOOO00000 .channel )#line:2299
        OO0O000OOOOO00000 .channel .registerObject ("bridge",OO0O000OOOOO00000 )#line:2300
if __name__ =='__main__':#line:2302
    if status =='True':#line:2303
        flask_thread =Thread (target =lambda :app .run (port =5000 ,debug =False ,use_reloader =False ))#line:2304
        flask_thread .start ()#line:2305
        rpc_thread =Thread (target =check_discord_process )#line:2307
        rpc_thread .start ()#line:2308
        app_qt =QApplication (argv )#line:2310
        window =MainWindow ()#line:2311
        window .show ()#line:2312
        exit (app_qt .exec_ ())#line:2313
    else :#line:2314
        messagebox .showerror ("Entity Client","Доступна новая версия.")

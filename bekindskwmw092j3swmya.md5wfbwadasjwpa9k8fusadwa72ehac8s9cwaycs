from javascript .errors import JavaScriptError #line:1
from flask import Flask ,request ,jsonify ,Response #line:3
from flask_cors import CORS #line:4
from PyQt5 .QtWidgets import QApplication ,QMainWindow #line:5
from PyQt5 .QtWebEngineWidgets import QWebEngineView #line:6
from PyQt5 .QtWebChannel import QWebChannel #line:7
from tkinter import messagebox #line:8
from javascript import require ,On ,errors #line:9
from random import uniform #line:10
from sys import exit ,argv #line:11
from asyncio import run ,sleep #line:12
from threading import Thread ,Timer ,Event #line:13
from queue import Queue ,Empty #line:14
from hashlib import sha512 #line:15
from requests import get #line:16
from subprocess import check_output #line:17
from re import search #line:18
from random import choice ,randint #line:19
import time #line:20
mineflayer =require ('mineflayer')#line:22
pathfinder =require ('mineflayer-pathfinder')#line:23
GoalFollow =pathfinder .goals .GoalFollow #line:24
isFollowing =False #line:26
task_queue =Queue ()#line:27
first_player =None #line:29
second_player =None #line:30
first_bet =0 #line:31
second_bet =0 #line:32
min_amount =5000 #line:33
autocasino_status =False #line:34
waiting_for_second_player =None #line:35
timeout_timer =None #line:36
last_bot_message =""#line:38
message_text =""#line:39
message_queue =Queue ()#line:40
html_content =r"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@4/dark.css">
    <style>
        body {
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #fff;
            font-size: 18px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            background-color: #111;
        }
        .container {
            display: flex;
            height: 100vh;
        }
        .sidebar {
            background-color: #222;
            padding: 20px;
            width: 300px;
        }
        .sidebar h2 {
            margin-top: 0;
            font-size: 28px;
            font-weight: bold;
        }
        .sidebar ul {
            list-style: none;
            padding: 0;
        }
        .sidebar li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        .sidebar li:hover {
            background-color: #333;
        }
        
        .sidebar.gradient-blue-green { background-image: linear-gradient(to right, blue, green); }
        .sidebar.gradient-darkblue { background-image: linear-gradient(to right, darkblue, #222); }
        .sidebar.gradient-red-orange { background-image: linear-gradient(to right, red, orange); }
        .sidebar.gradient-purple-blue { background-image: linear-gradient(to right, purple, blue); }
        .sidebar.gradient-yellow-green { background-image: linear-gradient(to right, yellow, green); }
        .sidebar.gradient-orange-red { background-image: linear-gradient(to right, darkred, #500000); }
        .sidebar.gradient-gold-yellow { background-image: linear-gradient(to right, gold, yellow); }
        .sidebar.gradient-cyan-blue { background-image: linear-gradient(to right, cyan, blue); }
        .sidebar.gradient-lime-green { background-image: linear-gradient(to right, lime, green); }
        .sidebar.gradient-pink-purple { background-image: linear-gradient(to right, pink, purple); }
        .sidebar.gradient-teal-blue { background-image: linear-gradient(to right, teal, blue); }
        .sidebar.gradient-brown-beige { background-image: linear-gradient(to right, brown, beige); }
        .sidebar.gradient-gray-black { background-image: linear-gradient(to right, gray, black); }
        
        .time {
            font-size: 16px;
            color: #aaa;
            margin-top: 20px;
        }
        .theme {
            display: none;
        }
        .content {
            flex-grow: 1;
            background-color: #111;
            padding: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .home-content, .misc-content, .ai-content, .custom-function-content {
            width: 500px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 20px;
            font-weight: bold;
        }
        .form-group input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 17px;
            transition: background-color 0.2s;
        }
        .form-group button:hover {
            background-color: #286090;
        }
        .content > div {
            display: none;
        }
        .content > div:first-child {
            display: block;
        }
        body.dark {
            background-color: #111;
        }
        body.dark .content {
            background-color: #111;
        }

        .function-list {
            list-style: none;
            padding: 0;
        }
        .function-list li {
            padding: 15px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 4px;
            transition: background-color 0.2s;
            background-color: #333;
            margin-bottom: 10px;
        }
        .function-list li:hover {
            background-color: #444;
        }
        .selected {
            background-color: #444 !important;
        }
        #afk-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }
        #afk-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }
        #afk-modal .form-group {
            margin-bottom: 20px;
        }
        #afk-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #afk-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }
        #afk-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }
        #afk-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #afk-modal .form-group button:hover {
            background-color: #286090;
        }
        #afk-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #afk-modal .close-btn:hover {
            color: #fff;
        }
        
        #start-button {
            outline: none;
        }

        #click-on-gui-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }
        #click-on-gui-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }
        #click-on-gui-modal .form-group {
            margin-bottom: 20px;
        }
        #click-on-gui-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        #click-on-gui-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }
        #click-on-gui-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }
        #click-on-gui-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        #click-on-gui-modal .form-group button:hover {
            background-color: #286090;
        }
        #click-on-gui-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }
        #click-on-gui-modal .close-btn:hover {
            color: #fff;
        }
        
        .console-content {
            display: flex;
            flex-direction: column;
            width: 100%;
        }
        
        #console-log {
            flex-grow: 1;
            padding: 10px;
            background-color: #222;
            color: #fff;
            border: 2px solid #333;
            border-radius: 10px;
            overflow-y: auto;
            margin-bottom: 20px;
            font-size: 18px;
            max-height: 300px;
        }
        
        .console-content .form-group {
            display: flex;
        }
        
        .console-content .form-group input[type="text"] {
            flex-grow: 1;
            padding: 12px;
            border: 2px solid #333;
            background-color: #222;
            color: #fff;
            font-size: 18px;
            border-radius: 10px;
        }
        
        .console-content .form-group input[type="text"]:focus {
            outline: none;
            border-color: #555;
        }
        
        .console-content .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 10px;
            margin-left: 10px;
            outline: none;
        }
        
        .console-content .form-group button:hover {
            background-color: #286090;
        }
        
        #autoway-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #autoway-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #autoway-modal .form-group {
            margin-bottom: 20px;
        }

        #autoway-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #autoway-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #autoway-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #autoway-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #autoway-modal .form-group button:hover {
            background-color: #286090;
        }

        #autoway-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #autoway-modal .close-btn:hover {
            color: #fff;
        }
        
        #follow-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #follow-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #follow-modal .form-group {
            margin-bottom: 20px;
        }

        #follow-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #follow-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #follow-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #follow-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #follow-modal .form-group button:hover {
            background-color: #286090;
        }

        #follow-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #follow-modal .close-btn:hover {
            color: #fff;
        }
        
        #autocasino-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #autocasino-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #autocasino-modal .form-group {
            margin-bottom: 20px;
        }

        #autocasino-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #autocasino-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #autocasino-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #autocasino-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #autocasino-modal .form-group button:hover {
            background-color: #286090;
        }

        #autocasino-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #autocasino-modal .close-btn:hover {
            color: #fff;
        }

        #get-location-modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #222;
            padding: 40px;
            border: 2px solid #444;
            border-radius: 10px;
            z-index: 1000;
            width: 400px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        #get-location-modal h2 {
            margin-top: 0;
            font-size: 24px;
        }

        #get-location-modal .form-group {
            margin-bottom: 20px;
        }

        #get-location-modal .form-group label {
            display: block;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        #get-location-modal .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #333;
            background-color: #111;
            color: #fff;
            font-size: 16px;
            border-radius: 5px;
        }

        #get-location-modal .form-group input:focus {
            outline: none;
            border-color: #555;
        }

        #get-location-modal .form-group button {
            background-color: #337ab7;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 18px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }

        #get-coordinates-modal .form-group button:hover {
            background-color: #286090;
        }

        #get-location-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #aaa;
            font-size: 20px;
        }

        #get-location-modal .close-btn:hover {
            color: #fff;
        }

        .hud-content { 
            width: 500px;
            text-align: center;
        }
        
        .theme-selector label {
          display: block;
          margin-bottom: 10px;
          color: #fff;
          font-weight: bold;
          font-size: 24px; 
        }
        
        .color-options {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
          gap: 10px;
        }
        
        .color-options input[type="radio"] {
          display: none;
        }
        
        .color-options label {
          height: 40px;
          border-radius: 5px;
          cursor: pointer;
        }
        
        .color-options label[for="color-black"] {
          background-color: #111; 
        }
        
        .color-options label[for="color-blue-green"] {
          background-image: linear-gradient(to right, blue, green);
        }
        
        .color-options label[for="color-darkblue"] {
          background-image: linear-gradient(to right, darkblue, #222);
        }
        
        .color-options label[for="color-red-orange"] {
          background-image: linear-gradient(to right, red, orange);
        }
        
        .color-options label[for="color-purple-blue"] {
          background-image: linear-gradient(to right, purple, blue);
        }
        
        .color-options label[for="color-yellow-green"] {
          background-image: linear-gradient(to right, yellow, green);
        }
        
        .color-options label[for="color-orange-red"] {
          background-image: linear-gradient(to right, darkred, #500000); 
        }

        .color-options label[for="color-gold-yellow"] {
          background-image: linear-gradient(to right, gold, yellow);
        }

        .color-options label[for="color-cyan-blue"] {
          background-image: linear-gradient(to right, cyan, blue);
        }

        .color-options label[for="color-lime-green"] {
          background-image: linear-gradient(to right, lime, green);
        }

        .color-options label[for="color-pink-purple"] {
          background-image: linear-gradient(to right, pink, purple);
        }

        .color-options label[for="color-teal-blue"] {
          background-image: linear-gradient(to right, teal, blue);
        }

        .color-options label[for="color-brown-beige"] {
          background-image: linear-gradient(to right, brown, beige);
        }

        .color-options label[for="color-gray-black"] {
          background-image: linear-gradient(to right, gray, black);
        }
        
        .color-options input[type="radio"]:checked + label {
            border: 2px solid white; 
        }
        
        .gradient-blue-green .custom-element {
            background-image: linear-gradient(to right, blue, green) !important;
        }
        
        .gradient-darkblue .custom-element {
            background-image: linear-gradient(to right, darkblue, #222) !important; 
        }
        
        .gradient-red-orange .custom-element {
            background-image: linear-gradient(to right, red, orange) !important; 
        }
        
        .gradient-purple-blue .custom-element {
            background-image: linear-gradient(to right, purple, blue) !important; 
        }
        
        .gradient-yellow-green .custom-element {
            background-image: linear-gradient(to right, yellow, green) !important; 
        }
        
        .gradient-orange-red .custom-element {
            background-image: linear-gradient(to right, darkred, #500000) !important; 
        }
        
        .gradient-gold-yellow .custom-element {
            background-image: linear-gradient(to right, gold, yellow) !important;
        }
        
        .gradient-cyan-blue .custom-element {
            background-image: linear-gradient(to right, cyan, blue) !important;
        }
        
        .gradient-lime-green .custom-element {
            background-image: linear-gradient(to right, lime, green) !important;
        }
        
        .gradient-pink-purple .custom-element {
            background-image: linear-gradient(to right, pink, purple) !important;
        }
        
        .gradient-teal-blue .custom-element {
            background-image: linear-gradient(to right, teal, blue) !important;
        }
        
        .gradient-brown-beige .custom-element {
            background-image: linear-gradient(to right, brown, beige) !important;
        }
        
        .gradient-gray-black .custom-element {
            background-image: linear-gradient(to right, gray, black) !important;
        }
    </style>
</head>
<body class="dark">
<div class="container">
    <div class="sidebar">
        <h2>Entity Client</h2>
        <ul>
            <li id="home">Home</li>
            <li id="misc">Misc</li>
            <li id="console">Console</li>
            <li id="hud">HUD</li>
        </ul>
    </div>
    <div class="content">
        <div class="home-content">
            <form id="start-form">
                <div class="form-group">
                    <label for="username">Никнейм</label>
                    <input type="text" id="username" name="username" placeholder="Введите ник бота">
                </div>
                <div class="form-group">
                    <label for="ip-address">IP Адрес</label>
                    <input type="text" id="ip-address" name="ip_address" placeholder="Введите IP адрес">
                </div>
                <div class="form-group">
                    <label for="port">Порт</label>
                    <input type="text" id="port" name="port" placeholder="Введите порт">
                </div>
                <div class="form-group">
                    <button type="button" class="custom-element" id="start-button">Запуск</button>
                </div>
            </form>
            <div id="output-status"></div>
            <div id="output-log"></div>
        </div>
        <div class="misc-content">
            <ul class="function-list">
                <li class="custom-element"id="anti-afk">Anti-AFK</li>
                <li class="custom-element"id="autocasino">AutoCasino</li>
                <li class="custom-element"id="autoway">AutoWay</li>
                <li class="custom-element"id="click-on-gui" class="custom-element">Click On Gui</li>
                <li class="custom-element">Follow</li>
                <li class="custom-element"id="get-location">Get Location</li>
            </ul>
        </div>
        <div class="console-content" style="display: none;">
            <div id="console-log"></div> 
            <div class="form-group"> 
                <input type="text" id="console-input" placeholder="Введите сообщение...">
                <button class="custom-element" id="console-send-button">Отправить</button> 
            </div>
        </div>
        <div class="hud-content style="display: none;">
            <div class="theme-selector">
                <label for="theme-select">Цвет клиента:</label>
                <div class="color-options">
                    <input type="radio" id="color-black" name="theme" value="color-black" checked>
                    <label for="color-black" class="color-black"></label>
    
                    <input type="radio" id="color-blue-green" name="theme" value="gradient-blue-green">
                    <label for="color-blue-green" class="gradient-blue-green"></label>
    
                    <input type="radio" id="color-darkblue" name="theme" value="gradient-darkblue">
                    <label for="color-darkblue" class="gradient-darkblue"></label>
    
                    <input type="radio" id="color-red-orange" name="theme" value="gradient-red-orange">
                    <label for="color-red-orange" class="gradient-red-orange"></label>
    
                    <input type="radio" id="color-purple-blue" name="theme" value="gradient-purple-blue">
                    <label for="color-purple-blue" class="gradient-purple-blue"></label>
    
                    <input type="radio" id="color-yellow-green" name="theme" value="gradient-yellow-green">
                    <label for="color-yellow-green" class="gradient-yellow-green"></label>
    
                    <input type="radio" id="color-orange-red" name="theme" value="gradient-orange-red">
                    <label for="color-orange-red" class="gradient-orange-red"></label>
    
                    <input type="radio" id="color-gold-yellow" name="theme" value="gradient-gold-yellow">
                    <label for="color-gold-yellow" class="gradient-gold-yellow"></label>
    
                    <input type="radio" id="color-cyan-blue" name="theme" value="gradient-cyan-blue">
                    <label for="color-cyan-blue" class="gradient-cyan-blue"></label>
    
                    <input type="radio" id="color-lime-green" name="theme" value="gradient-lime-green">
                    <label for="color-lime-green" class="gradient-lime-green"></label>
    
                    <input type="radio" id="color-pink-purple" name="theme" value="gradient-pink-purple">
                    <label for="color-pink-purple" class="gradient-pink-purple"></label>
    
                    <input type="radio" id="color-teal-blue" name="theme" value="gradient-teal-blue">
                    <label for="color-teal-blue" class="gradient-teal-blue"></label>
    
                    <input type="radio" id="color-brown-beige" name="theme" value="gradient-brown-beige">
                    <label for="color-brown-beige" class="gradient-brown-beige"></label>
    
                    <input type="radio" id="color-gray-black" name="theme" value="gradient-gray-black">
                    <label for="color-gray-black" class="gradient-gray-black"></label>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="afk-modal">
    <span class="close-btn" onclick="closeAntiAfkModal()">×</span>
    <h2>Anti-AFK</h2>
    <div class="form-group">
        <label for="afk-cycles">Количество циклов</label>
        <input type="number" id="afk-cycles" min="1" value="10">
    </div>
    <div class="form-group">
        <button class="custom-element" id="afk-start-button">Запуск</button>
    </div>
</div>
<div id="click-on-gui-modal">
    <span class="close-btn" onclick="closeClickOnGuiModal()">×</span>
    <h2>Click On Gui</h2>
    <div class="form-group">
        <label for="bot-slot">Введите номер слота</label>
        <input type="text" id="bot-slot">
    </div>
    <div class="form-group">
        <button class="custom-element" id="click-on-gui-start-button">Нажать</button>
    </div>
</div>

<div id="autocasino-modal">
    <span class="close-btn" onclick="closeAutoCasinoModal()">×</span>
    <h2>FunTime AutoCasino</h2>
    <div class="form-group">
        <label for="autocasino_min_amount">Минимальная сумма</label>
        <input type="number" id="autocasino-min-amount" min="5000" value="5000">
    </div>
    <div class="form-group">
        <button class="custom-element" id="autocasino-start-button">Запуск</button>
        <button type="button" class="custom-element" id="autocasino-stop-button" style="display: none;">Остановить</button>
    </div>
</div>

<div id="autoway-modal">
    <span class="close-btn" onclick="closeAutowayModal()">×</span>
    <h2>AutoWay</h2>
    <div class="form-group">
        <label for="autoway-x">Координата X:</label>
        <input type="number" id="autoway-x">
    </div>
    <div class="form-group">
        <label for="autoway-z">Координата Z:</label>
        <input type="number" id="autoway-z">
    </div>
    <div class="form-group">
        <button class="custom-element" id="autoway-start-button">Запуск</button>
    </div>
</div>
<div id="follow-modal">
    <span class="close-btn" onclick="closeFollowModal()">×</span>
    <h2>Follow Player</h2>
    <div class="form-group">
        <label for="follow-player-name">Ник игрока</label>
        <input type="text" id="follow-player-name">
    </div>
    <div class="form-group">
        <button type="button" class="custom-element" id="follow-start-button">Запуск</button>
        <button type="button" class="custom-element" id="follow-stop-button" style="display: none;">Остановить</button>
    </div>
</div>
<div id="get-location-modal">
    <span class="close-btn" onclick="closeGetLocationModal()">×</span>
    <h2>Get Location</h2>
    <div class="form-group">
        <label for="player-name">Ник игрока</label>
        <input type="text" id="player-name">
    </div>
    <div class="form-group">
        <button class="custom-element" id="get-location-button">Запуск</button>
    </div>
</div>
<script>
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
    });
    
    home.classList.add('selected');
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const contentDivs = document.querySelectorAll('.content > div');
    const sidebarItems = document.querySelectorAll('.sidebar li');
    let botStarted = false;

    sidebarItems.forEach(item => {
      item.addEventListener('click', function () {
        const id = this.id;

    if (id === 'console' && !botStarted) {
      Swal.fire({
        icon: 'warning',
        title: 'Bot Error',
        text: 'Сначала запустите бота!',
      });
      return;
    }
    
    if (id === 'hud' && !isPremium) {
      Swal.fire({
        title: 'Premium Function',
        text: 'Для использования этой функции требуется Premium подписка!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Купить Premium',
        cancelButtonText: 'Отмена'
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = 'https://funpay.com/users/6829696/';
        }
      });
      return;
    }

        contentDivs.forEach(div => {
          if (div.classList.contains(id + '-content')) {
            div.style.display = 'block';
          } else {
            div.style.display = 'none';
          }
        });
        sidebarItems.forEach(item => {
          item.classList.remove('selected');
        });
        this.classList.add('selected');
      });
    });

    const startButton = document.getElementById('start-button');
    let lastClickTime = 0;
    const throttleTime = 2500;

    startButton.addEventListener('click', () => {
        const now = new Date().getTime();
        if (now - lastClickTime < throttleTime) {
            Swal.fire({
                icon: 'warning',
                title: 'Too many requests',
                text: 'Пожалуйста, повторите попытку позже.',
            });
            return;
        }
            
        lastClickTime = now;
        const username = document.getElementById('username').value;
        const ipAddress = document.getElementById('ip-address').value;
        const port = document.getElementById('port').value;

    if (!username || !ipAddress || !port) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Заполните все поля.',
        });
        return;
    }
    
    if (isNaN(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт должен быть числом.',
        });
        return;
    }
    
    if (port.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Порт некорректный.',
        });
        return;
    }
    
    if (username.length < 3) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Никнейм некорректный.',
        });
        return;
    }
    
    if (ipAddress.length < 4) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'IP-адрес некорректный.',
        });
        return;
    }

    const specialChars = /[@#^$%&*()_\[\]{}|~!+\\\/=:;"'<>?,]/;
    const whitespace = /\s/;
    const cyrillic = /[а-яА-ЯёЁ]/;
    
    if (specialChars.test(username) || specialChars.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Специальные символы запрещены.',
        });
        return;
    }
    
    if (whitespace.test(username) || whitespace.test(ipAddress) || whitespace.test(port)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Пробелы запрещены.',
        });
        return;
    }
    
    if (cyrillic.test(username) || cyrillic.test(ipAddress)) {
        Swal.fire({
            icon: 'error',
            title: 'Input Error',
            text: 'Русские символы запрещены.',
        });
        return;
    }

        if (botStarted) {
            fetch('http://127.0.0.1:5000/stop-bot', {
                method: 'POST',
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Запуск';
                botStarted = false;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Stopped',
                    text: 'Бот был успешно остановлен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Ошибка при остановке бота.',
                });
            });
        } else {
            fetch('http://127.0.0.1:5000/start-bot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: username,
                    ip_address: ipAddress,
                    port: port,
                }),
            })
            .then(response => response.json())
            .then(data => {
                startButton.textContent = 'Остановить';
                botStarted = true;
                Swal.fire({
                    icon: 'success',
                    title: 'Bot Started',
                    text: 'Бот был успешно запущен.',
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.',
                });
            });
        }
    });

    const afkButton = document.getElementById('anti-afk');
    const afkModal = document.getElementById('afk-modal');
    const afkStartButton = document.getElementById('afk-start-button');

    afkButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        afkModal.style.display = 'block';
    });

    afkStartButton.addEventListener('click', () => {
        const cycles = document.getElementById('afk-cycles').value;
        fetch('http://127.0.0.1:5000/start-antiafk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                cycles: cycles,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Anti-AFK Started',
                text: 'Anti-AFK был успешно запущен!',
            });
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        afkModal.style.display = 'none';
    });

    const autoCasinoButton = document.getElementById('autocasino');
    const autoCasinoModal = document.getElementById('autocasino-modal');
    const autoCasinoStartButton = document.getElementById('autocasino-start-button');
    const autoCasinoStopButton = document.getElementById('autocasino-stop-button');

    autoCasinoButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autoCasinoModal.style.display = 'block';
    });

    autoCasinoStartButton.addEventListener('click', () => {
        const amount = document.getElementById('autocasino-min-amount').value;
        fetch('http://127.0.0.1:5000/start-autocasino', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                min_amount: amount,
            }),
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'AutoCasino Started',
                text: 'AutoCasino был успешно запущен!',
            });

            autoCasinoStartButton.style.display = 'none';
            autoCasinoStopButton.style.display = 'block';
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Неизвестная ошибка.',
            });
        });
        autoCasinoModal.style.display = 'none';
    });
    
    autoCasinoStopButton.addEventListener('click', () => {
        fetch('http://127.0.0.1:5000/stop-autocasino', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'AutoCasino',
                    text: 'Бот прекратил писать в чат.',
                });

                autoCasinoStartButton.style.display = 'block';
                autoCasinoStopButton.style.display = 'none';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Bot Error',
                    text: 'Неизвестная ошибка.',
                });
            }
        });
    });

    const clickOnGuiButton = document.getElementById('click-on-gui');
    const clickOnGuiModal = document.getElementById('click-on-gui-modal');
    const clickOnGuiStartButton = document.getElementById('click-on-gui-start-button');
    
    clickOnGuiButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        clickOnGuiModal.style.display = 'block';
    });

    clickOnGuiStartButton.addEventListener('click', () => {
        const botSlot = parseInt(document.getElementById('bot-slot').value); 
    
        if (isNaN(botSlot)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректный номер слота.',
            });
            return; 
        }
    
        fetch('http://127.0.0.1:5000/click_on_gui', { 
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ bot_slot: botSlot }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Click On Gui',
                    text: 'Бот кликнул по слоту ' + botSlot + '.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Не удалось выполнить клик.',
                });
            }
        });
        document.getElementById('bot-slot').value = '';
    });

    const autowayButton = document.getElementById('autoway');
    const autowayModal = document.getElementById('autoway-modal');
    const autowayStartButton = document.getElementById('autoway-start-button');

    autowayButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        autowayModal.style.display = 'block';
    });

    autowayStartButton.addEventListener('click', () => {
        const x = parseInt(document.getElementById('autoway-x').value);
        const z = parseInt(document.getElementById('autoway-z').value);

        if (isNaN(x) || isNaN(z)) {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Пожалуйста, введите корректные координаты X и Z.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/start-autoway', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ x: x, z: z }),
        })
            .then(response => {
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'AutoWay started',
                        text: 'Бот начал движение к указанным координатам.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Bot Error',
                        text: 'Не удалось запустить AutoWay.',
                    });
                }
            });
        autowayModal.style.display = 'none';
    });
    
    const consoleLog = document.getElementById('console-log');
    const consoleInput = document.getElementById('console-input');
    const consoleSendButton = document.getElementById('console-send-button');
    
    function logToConsole(message) {
        const messageElement = document.createElement('p');
        messageElement.textContent = message;
        consoleLog.appendChild(messageElement);
        consoleLog.scrollTop = consoleLog.scrollHeight;
    }
    
    consoleSendButton.addEventListener('click', () => {
        const message = consoleInput.value.trim();
        if (message !== "") {
            fetch('http://127.0.0.1:5000/console_message', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({message: message})
            });
            consoleInput.value = ""; 
        }
    });

    function checkForMessages() {
        if (botStarted) {
            fetch('http://127.0.0.1:5000/get_messages')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.text !== '') {
                        logToConsole(data.text);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                });
        }
    }
    
    const followButton = document.querySelector('.function-list li:nth-child(5)');
    const followModal = document.getElementById('follow-modal');
    const followStartButton = document.getElementById('follow-start-button');
    const followStopButton = document.getElementById('follow-stop-button');
    let isFollowing = false; 
    
    followButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        followModal.style.display = 'block';
    });
    
    followStartButton.addEventListener('click', () => {
        const playerName = document.getElementById('follow-player-name').value;
    
        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите ник игрока.',
            });
            return;
        }
    
        fetch('http://127.0.0.1:5000/start-follow', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Started',
                    text: 'Бот начал движение за игроком ' + playerName + '.',
                });
                isFollowing = true;
                followStartButton.style.display = 'none';
                followStopButton.style.display = 'block';
                autowayModal.style.display = 'none';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to start following.',
                });
            }
        });
    });
    
    followStopButton.addEventListener('click', () => {
        fetch('http://127.0.0.1:5000/stop-follow', {
            method: 'POST',
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Follow Stopped',
                    text: 'Бот прекратил движение.',
                });
                isFollowing = false;
                autowayModal.style.display = 'none';
                followStartButton.style.display = 'block'; 
                followStopButton.style.display = 'none'; 
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Bot Error',
                    text: 'Неизвестная ошибка.',
                });
            }
        });
    });
    
    const getLocationButton = document.querySelector('.function-list li:nth-child(6)'); 
    const getLocationModal = document.getElementById('get-location-modal');
    const getPlayerLocationButton = document.getElementById('get-location-button');
    
    getLocationButton.addEventListener('click', () => {
        if (!botStarted) {
            Swal.fire({
                icon: 'warning',
                title: 'Bot Error',
                text: 'Запустите бота перед использованием этой функции.',
            });
            return;
        }
        getLocationModal.style.display = 'block';
    });

    getPlayerLocationButton.addEventListener('click', () => {
        const playerName = document.getElementById('player-name').value;

        if (playerName.trim() === "") {
            Swal.fire({
                icon: 'error',
                title: 'Input Error',
                text: 'Введите имя игрока.',
            });
            return;
        }

        fetch('http://127.0.0.1:5000/get-coordinates', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ player: playerName }),
        })
            .then(response => response.json()) 
            .then(data => { 
                if (data.success) { 
                   Swal.fire({
                        icon: 'success',
                        title: 'Get Location',
                        text: 'Информация выведена в чат.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Не удалось получить координаты.',
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Неизвестная ошибка.', 
                });
            });

        getLocationModal.style.display = 'none'; 
    });

    const colorOptions = document.querySelectorAll('.color-options input[type="radio"]');
    const body = document.body; 
    const sidebar = document.querySelector('.sidebar');
    const formGroups = document.querySelectorAll('.form-group');
    const consoleContent = document.querySelector('.console-content');
    const content = document.querySelector('.content');
    
    colorOptions.forEach(option => {
        option.addEventListener('change', function() {
            const selectedGradient = this.value;
    
            body.className = '';
            sidebar.className = 'sidebar';
            content.className = 'content';

            body.classList.add(selectedGradient);
            sidebar.classList.add(selectedGradient);
            content.classList.add(selectedGradient);
    
            formGroups.forEach(formGroup => {
                formGroup.className = 'form-group';
                formGroup.classList.add(selectedGradient);
            });
    
            consoleContent.className = 'console-content';
            consoleContent.classList.add(selectedGradient);
        });
    });
    
    let isPremium;

    fetch('http://127.0.0.1:5000/check_premium')
    .then(response => response.json())
    .then(data => {
        isPremium = data.isPremium; 
    })
    .catch(error => console.error('Fetch Error:', error));


    setInterval(checkForMessages, 1250);
    
    function closeAutoCasinoModal() {
        autoCasinoModal.style.display = 'none';
    }
    
    function closeGetLocationModal() {
        getLocationModal.style.display = 'none';
    }

    function closeFollowModal() {
        followModal.style.display = 'none';
    }

    function closeAutowayModal() {
        autowayModal.style.display = 'none';
    }

    function closeClickOnGuiModal() {
        clickOnGuiModal.style.display = 'none';
    }

    function closeAntiAfkModal() {
        afkModal.style.display = 'none';
    }

</script>
</body>
</html>
"""#line:1681
app =Flask (__name__ )#line:1683
CORS (app )#line:1684
bot_started =False #line:1686
@app .route ('/start-bot',methods =['POST'])#line:1688
def start_bot_route ():#line:1689
    global bot_started #line:1690
    if bot_started :#line:1691
        return jsonify ({'success':False ,'message':'Бот уже запущен.'})#line:1692
    OOOO0OOOO0OOOOOO0 =request .json #line:1693
    O0O00O0OOO0O00OOO =OOOO0OOOO0OOOOOO0 ['username']#line:1694
    O000OO00OO00OO0O0 =OOOO0OOOO0OOOOOO0 ['ip_address']#line:1695
    O00OOO0OOOO0O00O0 =OOOO0OOOO0OOOOOO0 ['port']#line:1696
    OOO0000O0O000OO00 =Thread (target =start_bot ,args =(O0O00O0OOO0O00OOO ,O000OO00OO00OO0O0 ,O00OOO0OOOO0O00O0 ))#line:1697
    OOO0000O0O000OO00 .start ()#line:1698
    bot_started =True #line:1699
    return jsonify ({'success':True })#line:1700
@app .route ('/stop-bot',methods =['POST'])#line:1702
def stop_bot_route ():#line:1703
    global bot_started ,bot #line:1704
    if not bot_started :#line:1705
        return jsonify ({'success':False ,'message':'Бот не запущен.'})#line:1706
    O0OOOOO00O0O000OO =Thread (target =stop_bot )#line:1707
    O0OOOOO00O0O000OO .start ()#line:1708
    bot_started =False #line:1709
    return jsonify ({'success':True })#line:1710
@app .route ('/start-antiafk',methods =['POST'])#line:1712
def start_antiafk_route ():#line:1713
    O00O0OOO000OOOOO0 =request .json #line:1714
    O000O0O00OO0000O0 =int (O00O0OOO000OOOOO0 ['cycles'])#line:1715
    OOO0O0OOO0000OOOO =Thread (target =start_AntiAFK ,args =(O000O0O00OO0000O0 ,))#line:1716
    OOO0O0OOO0000OOOO .start ()#line:1717
    return jsonify ({'success':True })#line:1718
@app .route ('/click_on_gui',methods =['POST'])#line:1720
def click_on_gui_route ():#line:1721
    OOO0O000O000O0OOO =request .json #line:1722
    O0O00OO000O0O00OO =int (OOO0O000O000O0OOO .get ('bot_slot',0 ))#line:1723
    O00O00000O00OO0O0 =Thread (target =click_on_gui ,args =(O0O00OO000O0O00OO ,))#line:1724
    O00O00000O00OO0O0 .start ()#line:1725
    return jsonify ({'success':True })#line:1726
@app .route ('/start-autoway',methods =['POST'])#line:1728
def start_autoway_route ():#line:1729
    O000O0OO00O000OOO =request .json #line:1730
    OOOO0O0OO00000OOO =int (O000O0OO00O000OOO ['x'])#line:1731
    OO000000O00O00O0O =int (O000O0OO00O000OOO ['z'])#line:1732
    O00O0O00000O0OO00 =Thread (target =autoway ,args =(OOOO0O0OO00000OOO ,OO000000O00O00O0O ,))#line:1733
    O00O0O00000O0OO00 .start ()#line:1734
    return jsonify ({'success':True })#line:1735
@app .route ('/check_premium',methods =['GET'])#line:1737
def check_premium_route ():#line:1738
    OO00O0OO00000OO0O =get_hwid ()#line:1739
    if OO00O0OO00000OO0O :#line:1740
        OO0OO00OO00O00O0O =hash_hwid (OO00O0OO00000OO0O )#line:1741
        O00OOOO0OO000O0OO =check_premium (OO0OO00OO00O00O0O )#line:1742
        return jsonify ({'isPremium':O00OOOO0OO000O0OO })#line:1743
    else :#line:1744
        return jsonify ({'isPremium':False })#line:1745
@app .route ('/start-follow',methods =['POST'])#line:1747
def start_follow_route ():#line:1748
    global isFollowing #line:1749
    if isFollowing :#line:1750
        return jsonify ({'success':False ,'message':'Bot is already following.'})#line:1751
    OOOO000O0OO0O0000 =request .json #line:1753
    O0O0O00OOO0OOO00O =OOOO000O0OO0O0000 ['player']#line:1754
    OOO0OOO00O0OO00OO =Thread (target =follow ,args =(O0O0O00OOO0OOO00O ,))#line:1755
    OOO0OOO00O0OO00OO .start ()#line:1756
    isFollowing =True #line:1757
    return jsonify ({'success':True })#line:1758
@app .route ('/stop-follow',methods =['POST'])#line:1760
def stop_follow_route ():#line:1761
    global isFollowing #line:1762
    if not isFollowing :#line:1763
        return jsonify ({'success':False ,'message':'Bot is not currently following.'})#line:1764
    isFollowing =False #line:1766
    bot_unfollow ()#line:1767
    return jsonify ({'success':True })#line:1769
@app .route ('/get-coordinates',methods =['POST'])#line:1771
def get_coordinates_route ():#line:1772
    O0OOO000OOOOOO000 =request .json #line:1773
    OOOO0O0OO0O0O0O0O =O0OOO000OOOOOO000 ['player']#line:1774
    OOOOOOOOOO000O0O0 =Thread (target =get_coordinates ,args =(OOOO0O0OO0O0O0O0O ,))#line:1775
    OOOOOOOOOO000O0O0 .start ()#line:1776
    return jsonify ({'success':True })#line:1777
@app .route ('/start-autocasino',methods =['POST'])#line:1779
def start_autocasino_route ():#line:1780
    global autocasino_status #line:1781
    autocasino_status =False #line:1782
    OO00OO000OO000000 =request .json #line:1783
    O0O0000000O00OOOO =int (OO00OO000OO000000 .get ('min_amount'))#line:1784
    O0O0OOOO0O0OO000O =Thread (target =autocasino ,args =(O0O0000000O00OOOO ,))#line:1785
    O0O0OOOO0O0OO000O .start ()#line:1786
    return jsonify ({'success':True })#line:1787
@app .route ('/stop-autocasino',methods =['POST'])#line:1789
def stop_autocasino_route ():#line:1790
    global autocasino_status #line:1791
    autocasino_status =True #line:1792
    return jsonify ({'success':True })#line:1793
@app .route ('/console_message',methods =['POST'])#line:1795
def console_message_route ():#line:1796
    OO0OO000O00OOO0O0 =request .get_json ()#line:1797
    if OO0OO000O00OOO0O0 and 'message'in OO0OO000O00OOO0O0 :#line:1798
        OOO0OOOO00OO00OO0 =OO0OO000O00OOO0O0 ['message']#line:1799
        O00O0000OOOO0000O =Thread (target =handle_console_message ,args =(OOO0OOOO00OO00OO0 ,))#line:1800
        O00O0000OOOO0000O .start ()#line:1801
    return jsonify ({'success':True })#line:1802
@app .route ('/get_messages')#line:1804
def get_messages ():#line:1805
    try :#line:1806
        OO0O000000O0OOOO0 =message_queue .get (timeout =0.1 )#line:1807
        return jsonify ({'text':OO0O000000O0OOOO0 .get ('text','')})#line:1808
    except Empty :#line:1809
        return jsonify ({'text':''})#line:1810
def handle_console_message (O000O0OOOO00O0000 ):#line:1812
    global bot #line:1813
    if bot :#line:1814
        bot .chat (O000O0OOOO00O0000 )#line:1815
def get_bot_message ():#line:1817
    global last_bot_message #line:1818
    return last_bot_message #line:1819
def start_AntiAFK (OOO0OO0O0000O0O00 ):#line:1821
    run (bot_antiafk (OOO0OO0O0000O0O00 ))#line:1822
def autoway (OOO000OOOO0O000O0 ,O0000000OOOO0O0O0 ):#line:1824
    run (bot_autoway (OOO000OOOO0O000O0 ,O0000000OOOO0O0O0 ))#line:1825
def follow (OOO00000O0O00OO0O ):#line:1827
    run (bot_follow (OOO00000O0O00OO0O ))#line:1828
def click_on_gui (OOO0OO00O0OO000O0 ):#line:1830
    run (bot_click_on_gui (OOO0OO00O0OO000O0 ))#line:1831
def get_coordinates (OOOOO0OOOO000O0O0 ):#line:1833
    run (bot_get_coordinates (OOOOO0OOOO000O0O0 ))#line:1834
def autocasino (O0O0OO0OOO00O0OO0 ):#line:1836
    run (bot_autocasino (O0O0OO0OOO00O0OO0 ))#line:1837
def start_bot (OO0OOO0OO00O0OO00 ,O0O00O0000000O000 ,O00O0OOOO0O0O000O ):#line:1839
    run (start_bot_async (OO0OOO0OO00O0OO00 ,O0O00O0000000O000 ,O00O0OOOO0O0O000O ))#line:1840
def stop_bot ():#line:1842
    run (bot_disconnect ())#line:1843
def bot_open_auction ():#line:1845
    pass #line:1846
async def start_bot_async (O00000000O000OO0O ,OOO0O00OOOO000OO0 ,O0OOO00000O00OO0O ):#line:1848
    global bot #line:1849
    bot =mineflayer .createBot ({'username':O00000000O000OO0O ,'host':OOO0O00OOOO000OO0 ,'port':int (O0OOO00000O00OO0O ),'hideErrors':True })#line:1855
    bot .loadPlugin (pathfinder .pathfinder )#line:1856
    @On (bot ,'message')#line:1858
    def O00OOO00O00000OO0 (O00O0O0000O0OOO0O ,O000OOO00O000OOO0 ,*OOOO00OOOO00OOO0O ):#line:1859
        global needed_item ,message_text #line:1860
        if O000OOO00O000OOO0 .extra is None :#line:1861
            return False #line:1862
        message_text ={'text':''}#line:1863
        if O000OOO00O000OOO0 .extra is not None :#line:1864
            for OOO0OOOO0OO0OOOO0 in O000OOO00O000OOO0 .extra :#line:1865
                if hasattr (OOO0OOOO0OO0OOOO0 ,'text')and OOO0OOOO0OO0OOOO0 .text is not None :#line:1866
                    message_text ['text']+=OOO0OOOO0OO0OOOO0 .text #line:1867
        message_queue .put (message_text )#line:1868
async def bot_autocasino (OOO0O00OOOOOOO0OO ):#line:1870
    global autocasino_status #line:1871
    if autocasino_status :#line:1872
        return #line:1873
    def OOOO00O000OO0000O ():#line:1875
        if not autocasino_status :#line:1876
            time .sleep (0.5 )#line:1877
            bot .chat (f"! Я новый казино бот! Я даю возможность сыграть вам 1 на 1, для этого просто отправьте мне от ${OOO0O00OOOOOOO0OO}.")#line:1878
            time .sleep (1.5 )#line:1879
    def OOOO0OOO00OOO0O0O (O0OO0OO0O00O0000O ):#line:1881
        time .sleep (1 )#line:1882
        bot .chat (f"/msg {O0OO0OO0O00O0000O} Извините, но минимальная ставка - ${OOO0O00OOOOOOO0OO}. Ставка не возвращается")#line:1883
        time .sleep (1.5 )#line:1884
    def O0OOOO00OO00O000O (OOOO00OO0OOOOO000 ,OOOO0OO0000OO0O0O ):#line:1886
        bot .chat (f"/pay {OOOO00OO0OOOOO000} {OOOO0OO0000OO0O0O}")#line:1887
        time .sleep (1 )#line:1888
        bot .chat (f"/pay {OOOO00OO0OOOOO000} {OOOO0OO0000OO0O0O}")#line:1889
        time .sleep (1 )#line:1890
        bot .chat (f"/msg {OOOO00OO0OOOOO000} Вы уже участвуете в игре. Ваша ставка ${OOOO0OO0000OO0O0O} возвращена.")#line:1891
    def O000O00O00000OOO0 (OO0O0O00OO000O0O0 ,O00000000O0O0OOO0 ,O0000O0O00O0OO00O ):#line:1893
        bot .chat (f"/msg {O00000000O0O0OOO0} Ты проиграл игроку {OO0O0O00OO000O0O0}. Его ставка: {O0000O0O00O0OO00O}")#line:1894
    def O0OOO000O00O0O0O0 (O00OOO0O0OO0OO0OO ,OO0O000OO0O0O00OO ,OO0O00OO00O000O00 ,OO0OO0OO00OOOOO00 ):#line:1896
        O00OO0000000OOO0O =OO0O00OO00O000O00 +OO0OO0OO00OOOOO00 #line:1897
        OO0OO00O00O000O0O =int (O00OO0000000OOO0O *0.5 )#line:1898
        OO000000OOOOO0OOO =O00OO0000000OOO0O -OO0OO00O00O000O0O #line:1899
        O0OO000O000O00OOO =OO0O00OO00O000O00 +int (OO000000OOOOO0OOO *0.50 )if O00OOO0O0OO0OO0OO ==first_player else OO0OO0OO00OOOOO00 +int (OO000000OOOOO0OOO *0.50 )#line:1900
        bot .chat (f"/pay {O00OOO0O0OO0OO0OO} {O0OO000O000O00OOO}")#line:1902
        time .sleep (2 )#line:1903
        bot .chat (f"/pay {O00OOO0O0OO0OO0OO} {O0OO000O000O00OOO}")#line:1904
        time .sleep (1.25 )#line:1905
        bot .chat (f"/msg {O00OOO0O0OO0OO0OO} Ты выиграл игрока {OO0O000OO0O0O00OO}. Твой выигрыш: {O0OO000O000O00OOO}")#line:1906
        time .sleep (1.25 )#line:1907
        bot .chat (f"/msg {OO0O000OO0O0O00OO} Ты проиграл игроку {O00OOO0O0OO0OO0OO}. Его ставка: {OO0O00OO00O000O00 if O00OOO0O0OO0OO0OO == first_player else OO0OO0OO00OOOOO00}")#line:1908
        time .sleep (0.5 )#line:1909
        bot .chat ("/balance")#line:1910
        time .sleep (0.5 )#line:1911
    def O00000O0O0OOOOOO0 ():#line:1913
        global first_player ,second_player ,first_bet ,second_bet ,waiting_for_second_player ,timeout_timer #line:1914
        first_player =None #line:1915
        second_player =None #line:1916
        first_bet =0 #line:1917
        second_bet =0 #line:1918
        waiting_for_second_player =None #line:1919
        if timeout_timer is not None :#line:1920
            timeout_timer .cancel ()#line:1921
            timeout_timer =None #line:1922
    def O0OO0OO000O0000OO ():#line:1924
        global first_player ,first_bet #line:1925
        if first_player and second_player is None :#line:1926
            bot .chat (f'/msg {first_player} Время ожидания второго игрока истекло. Ваша ставка ${first_bet} возвращена.')#line:1927
            O0OOOO00OO00O000O (first_player ,first_bet )#line:1928
            O00000O0O0OOOOOO0 ()#line:1929
            time .sleep (1.5 )#line:1930
    def OOO0OO0OOO000O000 ():#line:1932
        if not autocasino_status :#line:1933
            while not autocasino_status :#line:1934
                OOOO00O000OO0000O ()#line:1935
                O00O00OO0OO0OOOO0 =randint (15 ,41 )#line:1936
                time .sleep (O00O00OO0OO0OOOO0 )#line:1937
    @On (bot ,'message')#line:1939
    def OO00OO0OO00O000O0 (_OOO0OO0O0OOO00000 ,O0OO00000000000OO ,*_OO00000000O00OOOO ):#line:1940
        global first_player ,second_player ,first_bet ,second_bet ,min_amount ,waiting_for_second_player ,timeout_timer ,autocasino_status #line:1941
        if autocasino_status :#line:1943
            return #line:1944
        if O0OO00000000000OO .extra is None :#line:1946
            return False #line:1947
        O0000O0OO00000OOO =''.join ([OOO000000OOO0000O .text for OOO000000OOO0000O in O0OO00000000000OO .extra ])#line:1949
        if '[$] Ваш баланс'in O0000O0OO00000OOO :#line:1951
            O0OO0O00OOO0O0OO0 =O0000O0OO00000OOO .split (":")#line:1952
            if len (O0OO0O00OOO0O0OO0 )>1 :#line:1953
                O000OO00000OO00OO =O0OO0O00OOO0O0OO0 [1 ].strip ()#line:1954
        if 'получено от игрока'in O0000O0OO00000OOO :#line:1956
            OOOOOO00OO0O0OOOO =r'\$([\d,]+).*получено от игрока (\w+)'#line:1957
            O000O000000OOO00O =search (OOOOOO00OO0O0OOOO ,O0000O0OO00000OOO )#line:1958
            if O000O000000OOO00O :#line:1960
                O0O00O00000OO00OO =int (O000O000000OOO00O .group (1 ).replace (',',''))#line:1961
                O0O00OOO0OOOOO000 =O000O000000OOO00O .group (2 )#line:1962
                if O0O00O00000OO00OO !=1 and O0O00O00000OO00OO <min_amount :#line:1964
                    OOOO0OOO00OOO0O0O (O0O00OOO0OOOOO000 )#line:1965
                    return #line:1966
                if O0O00OOO0OOOOO000 ==first_player or O0O00OOO0OOOOO000 ==second_player :#line:1968
                    O0OOOO00OO00O000O (O0O00OOO0OOOOO000 ,O0O00O00000OO00OO )#line:1969
                    return #line:1970
                if first_player is None :#line:1972
                    first_player =O0O00OOO0OOOOO000 #line:1973
                    first_bet =O0O00O00000OO00OO #line:1974
                    waiting_for_second_player =True #line:1975
                    if timeout_timer is not None :#line:1976
                        timeout_timer .cancel ()#line:1977
                    timeout_timer =Timer (90 ,O0OO0OO000O0000OO )#line:1978
                    timeout_timer .start ()#line:1979
                    bot .chat (f"/msg {O0O00OOO0OOOOO000} Ты зарегистрирован как первый игрок. Ставка: ${first_bet}")#line:1980
                elif second_player is None :#line:1981
                    O0O00O000000000OO =max (min_amount ,int (first_bet *0.8 ))#line:1982
                    O0OO0000O00OOOOOO =int (first_bet *1.2 )#line:1983
                    if O0O00O000000000OO <=O0O00O00000OO00OO <=O0OO0000O00OOOOOO :#line:1984
                        second_player =O0O00OOO0OOOOO000 #line:1985
                        second_bet =O0O00O00000OO00OO #line:1986
                        waiting_for_second_player =False #line:1987
                        if timeout_timer is not None :#line:1988
                            timeout_timer .cancel ()#line:1989
                            timeout_timer =None #line:1990
                    else :#line:1991
                        bot .chat (f"/msg {O0O00OOO0OOOOO000} Ставка некорректная. Подходящая ставка: ${O0O00O000000000OO}-${O0OO0000O00OOOOOO}. Ваша ставка ${O0O00O00000OO00OO} возвращена.")#line:1992
                        O0OOOO00OO00O000O (O0O00OOO0OOOOO000 ,O0O00O00000OO00OO )#line:1993
                        sleep (1.5 )#line:1994
                if first_player and second_player :#line:1996
                    OOO0OO000OOO000O0 =choice ([first_player ,second_player ])#line:1997
                    OO00O00O000OO0OO0 =first_player if OOO0OO000OOO000O0 ==second_player else second_player #line:1998
                    O0OOO000O00O0O0O0 (OOO0OO000OOO000O0 ,OO00O00O000OO0OO0 ,first_bet ,second_bet )#line:2000
                    O000O00O00000OOO0 (OOO0OO000OOO000O0 ,OO00O00O000OO0OO0 ,first_bet if OOO0OO000OOO000O0 ==first_player else second_bet )#line:2001
                    O00000O0O0OOOOOO0 ()#line:2002
    O0O0O00000O0O0000 =Thread (target =OOO0OO0OOO000O000 )#line:2004
    O0O0O00000O0O0000 .daemon =True #line:2005
    O0O0O00000O0O0000 .start ()#line:2006
async def bot_antiafk (O000O0O0O0000OO0O ):#line:2008
    for _O0OO0000OOO0O00OO in range (O000O0O0O0000OO0O ):#line:2009
        bot .setControlState ('right',True )#line:2010
        time .sleep (0.5 )#line:2011
        bot .setControlState ('right',False )#line:2012
        time .sleep (0.5 )#line:2013
        bot .setControlState ('left',True )#line:2014
        time .sleep (0.5 )#line:2015
        bot .setControlState ('left',False )#line:2016
        time .sleep (0.5 )#line:2017
async def bot_get_coordinates (OOO000000OO000O0O ):#line:2019
    if OOO000000OO000O0O in bot .players :#line:2020
        O0OO00OO0O00OO00O =bot .players [OOO000000OO000O0O ].entity #line:2021
        if O0OO00OO0O00OO00O is None or not hasattr (O0OO00OO0O00OO00O ,'position'):#line:2022
            bot .chat (f"Игрок с именем {OOO000000OO000O0O} не найден, либо не находится в радиусе 4 чанков.")#line:2023
            return jsonify ({'success':False })#line:2024
        OOO0OOOO0O0O00O00 =O0OO00OO0O00OO00O .position #line:2026
        OOOO0O0OOO00OOOOO ="{:.1f}".format (OOO0OOOO0O0O00O00 .x )#line:2027
        OOO0O0OOOO0O0O00O ="{:.1f}".format (OOO0OOOO0O0O00O00 .y )#line:2028
        O0OO0000OOO0OOO00 ="{:.1f}".format (OOO0OOOO0O0O00O00 .z )#line:2029
        bot .chat (f"Локация игрока {OOO000000OO000O0O}: x={OOOO0O0OOO00OOOOO}, y={OOO0O0OOOO0O0O00O}, z={O0OO0000OOO0OOO00}")#line:2031
        return jsonify ({'success':True })#line:2032
    else :#line:2033
        return jsonify ({'success':False })#line:2034
async def bot_autoway (O0O00OO00O0OO00OO ,OO0O000OOO0O0O00O ,*O0O00OOO00O000OOO ):#line:2036
    OO00O00OO0OOOOO0O =require ("minecraft-data")(bot .version )#line:2037
    O00O0000OO0O00OOO =pathfinder .Movements (bot ,OO00O00OO0OOOOO0O )#line:2038
    O00O0000OO0O00OOO .allowFreeMotion =True #line:2040
    O00O0000OO0O00OOO .allowSprinting =False #line:2041
    bot .pathfinder .setMovements (O00O0000OO0O00OOO )#line:2043
    bot .look (uniform (-180 ,180 ),uniform (-90 ,90 ))#line:2045
    bot .pathfinder .setGoal (pathfinder .goals .GoalNear (O0O00OO00O0OO00OO ,bot .entity .position .y ,OO0O000OOO0O0O00O ,1 ))#line:2046
    bot .setControlState ('jump',True )#line:2047
    bot .look (uniform (-180 ,180 ),uniform (-90 ,90 ))#line:2048
async def bot_follow (O00O000OOOOOO00OO ):#line:2050
    global isFollowing #line:2051
    if isFollowing :#line:2052
        OO0O0O0O00OOOOOOO =require ("minecraft-data")(bot .version )#line:2053
        O00OO00O00O000OOO =pathfinder .Movements (bot ,OO0O0O0O00OOOOOOO )#line:2054
        O00OO00O00O000OOO .allowFreeMotion =True #line:2056
        O00OO00O00O000OOO .allowSprinting =False #line:2057
        O000OOOOOOOOO0OOO =bot .players [O00O000OOOOOO00OO ].entity #line:2059
        bot .pathfinder .setMovements (O00OO00O00O000OOO )#line:2060
        OOO0OOOOO0O00OO00 =GoalFollow (O000OOOOOOOOO0OOO ,1 )#line:2061
        bot .pathfinder .setGoal (OOO0OOOOO0O00OO00 ,True )#line:2062
        await sleep (0.1 )#line:2063
    if not isFollowing :#line:2064
        bot .pathfinder .setGoal (None )#line:2065
async def bot_spammer (O0OOOO00OO000000O ,OOOO00O000OO0O0O0 ,O00O0OOOO0OO00OOO ,*O0OO000O00O0O0O00 ):#line:2067
    time .sleep (O00O0OOOO0OO00OOO )#line:2068
    O0O00O0OOO00O0000 =bot .players #line:2069
    for OO0O0OOOO0O0O00OO in O0O00O0OOO00O0000 :#line:2070
        OOO0OO000O00O0O00 =O0O00O0OOO00O0000 [OO0O0OOOO0O0O00OO ]["username"]#line:2071
        time .sleep (3.5 )#line:2072
        bot .chat (f'{O0OOOO00OO000000O} {OOO0OO000O00O0O00} {OOOO00O000OO0O0O0}')#line:2073
def use_on_entity (OOO00O0OOO00OO000 ):#line:2075
    global target_entity #line:2076
    try :#line:2077
        O0000OOOOO00OOOO0 =require ('minecraft-data')(bot .version )#line:2078
        O00OOO00O0OOOO00O =pathfinder .Movements (bot ,O0000OOOOO00OOOO0 )#line:2079
        bot .pathfinder .setMovements (O00OOO00O0OOOO00O )#line:2080
        bot .pathfinder .setGoal (pathfinder .goals .GoalNear (OOO00O0OOO00OO000 .position .x ,OOO00O0OOO00OO000 .position .y ,OOO00O0OOO00OO000 .position .z ,1 ))#line:2081
        target_entity =OOO00O0OOO00OO000 #line:2082
    except Exception as O00OO000000O00000 :#line:2083
        print (f"Error handling entity: {O00OO000000O00000}")#line:2084
def bot_unfollow ():#line:2086
    OOO00000000O0OO0O =require ("minecraft-data")(bot .version )#line:2087
    O0OOO0O0000OO00O0 =pathfinder .Movements (bot ,OOO00000000O0OO0O )#line:2088
    bot .pathfinder .setMovements (O0OOO0O0000OO00O0 )#line:2090
    bot .pathfinder .setGoal (None )#line:2091
async def bot_click_on_gui (OO0000O0OO0OOO0O0 ):#line:2093
    try :#line:2094
        time .sleep (1 )#line:2095
        bot .clickWindow (OO0000O0OO0OOO0O0 ,0 ,0 )#line:2096
    except errors .JavaScriptError :#line:2097
        pass #line:2098
async def bot_disconnect ():#line:2100
    bot .quit ()#line:2101
def get_wmi_data (O00OO00O0O0OOOOOO ):#line:2103
    try :#line:2104
        O00000OOOO0OO00OO =check_output (O00OO00O0O0OOOOOO ,shell =True ).decode ().split ('\n')[1 ].strip ()#line:2105
        return O00000OOOO0OO00OO #line:2106
    except Exception as O0O0OOOO0OO00OOO0 :#line:2107
        print (f"Ошибка при выполнении команды {O00OO00O0O0OOOOOO}: {O0O0OOOO0OO00OOO0}")#line:2108
        return None #line:2109
def get_hwid ():#line:2111
    OOO00O00000O00OOO =get_wmi_data ('wmic baseboard get serialnumber')#line:2112
    OO00OO00OO0O00O00 =get_wmi_data ('wmic cpu get processorid')#line:2113
    O0O000O00O00000O0 =get_wmi_data ('wmic diskdrive get serialnumber')#line:2114
    O0O0000000000000O =get_wmi_data ('wmic bios get serialnumber')#line:2115
    O0O000000OO0O0000 =get_wmi_data ('wmic os get serialnumber')#line:2116
    OO0O0OOO00O000OO0 =f"{OOO00O00000O00OOO}{OO00OO00OO0O00O00}{O0O000O00O00000O0}{O0O0000000000000O}{O0O000000OO0O0000}"#line:2118
    return OO0O0OOO00O000OO0 #line:2119
def hash_hwid (O0OOO00OOO0OO0000 ):#line:2121
    OOO00O0O000OOOO0O =sha512 (O0OOO00OOO0OO0000 .encode ()).hexdigest ()#line:2122
    return OOO00O0O000OOOO0O #line:2123
def get_premium_hwids ():#line:2125
    O00O0OO0O0OOOOOO0 ="https://raw.githubusercontent.com/rimero321/entityclient/main/hwids.txt"#line:2126
    O0000OO00O00OO0OO =get (O00O0OO0O0OOOOOO0 )#line:2127
    O0OO0OOOO0O00O000 =O0000OO00O00OO0OO .text .splitlines ()#line:2128
    return O0OO0OOOO0O00O000 #line:2129
def check_premium (OOOO0OOO0O00OO0O0 ):#line:2131
    if not OOOO0OOO0O00OO0O0 :#line:2132
        return False #line:2133
    OO0O0OOO0OOOOO0O0 =get_premium_hwids ()#line:2134
    return OOOO0OOO0O00OO0O0 in OO0O0OOO0OOOOO0O0 #line:2135
def client_status ():#line:2137
    OOO0O0O0OO00O0O00 =get ('https://raw.githubusercontent.com/rimero321/entityclient/main/versions.txt')#line:2138
    if OOO0O0O0OO00O0O00 .status_code ==200 :#line:2139
        O0OO0OO0O0O00O0OO =OOO0O0O0OO00O0O00 .text .split ('\n')#line:2140
        O0O0000O000OOOO00 =O0OO0OO0O0O00O0OO [0 ].split (': ')[1 ].strip ()#line:2141
        return O0O0000O000OOOO00 #line:2142
status =str (client_status ())#line:2144
class MainWindow (QMainWindow ):#line:2146
    def __init__ (OO000O00OOO000O0O ):#line:2147
        super ().__init__ ()#line:2148
        OO000O00OOO000O0O .setWindowTitle (' ')#line:2149
        OO000O00OOO000O0O .setGeometry (100 ,100 ,1050 ,700 )#line:2150
        OO000O00OOO000O0O .setFixedSize (1050 ,700 )#line:2151
        OO000O00OOO000O0O .browser =QWebEngineView ()#line:2152
        OO000O00OOO000O0O .browser .setHtml (html_content )#line:2153
        OO000O00OOO000O0O .setCentralWidget (OO000O00OOO000O0O .browser )#line:2154
        OO000O00OOO000O0O .channel =QWebChannel ()#line:2155
        OO000O00OOO000O0O .browser .page ().setWebChannel (OO000O00OOO000O0O .channel )#line:2156
        OO000O00OOO000O0O .channel .registerObject ("bridge",OO000O00OOO000O0O )#line:2157
if __name__ =='__main__':#line:2159
    if status =='True':#line:2160
        flask_thread =Thread (target =lambda :app .run (port =5000 ,debug =False ,use_reloader =False ))#line:2161
        flask_thread .start ()#line:2162
        app_qt =QApplication (argv )#line:2164
        window =MainWindow ()#line:2165
        window .show ()#line:2166
        exit (app_qt .exec_ ())#line:2167
    else :#line:2168
        messagebox .showerror ("Entity Client","Доступна новая версия.")
